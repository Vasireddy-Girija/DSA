Flower can be formed on or after bloomDay. k consecutive flowers can form a bouqet. Find number of bouqets formed if qw are on currDay.
public int numOfPossibleBouquets(int[] bloomDayList, int currDay, int k){
    int numOfFlowersInEachBouquet = 0;
    int totalBouquets = 0;
    for(int bloomDay : bloomDayList){
        if(bloomDay <= currDay){
            numOfFlowersInEachBouquet += 1;
            if(numOfFlowersInEachBouquet == k){
                totalBouquets += 1;
                numOfFlowersInEachBouquet = 0;
            }
        }else{
            numOfFlowersInEachBouquet = 0;
        }
    }
    return totalBouquets;
}

In how many days, can we ship the weights, if max. capacity is given.
public boolean canShipInDays(int[] weights, int days, int capacity){
    int currWeight = 0;
    int ansDays = 0;
    for(int element: weights){
        if(currWeight+element <= capacity){
            currWeight = currWeight + element;
        }else{
            ansDays += 1;
            if(ansDays > days) return false;
            currWeight = element;
        }
    }
    if(currWeight <= capacity) ansDays += 1;
    return ansDays <= days;
}

kth missing positive num - Input: arr = [2,3,4,7,11], k = 5; Output: 9
Brute force - put elements in map. And start looping from 1 to n.
class Solution {
    public int findKthPositive(int[] arr, int k) {
        for(int element : arr){
            if(element<=k) k+=1;
            else break;
        }
        return k;
    }
}

Second largets num - case-1 : can be same as first largest, case -2 : should be different from first largest.
While setting secondLargest to arr[i], check if firstLargest != secondLargest.

Max Consecutive Ones/ Run Length Encoding -
We can use 2 pointers or count approach.
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int l=0;
        int r=0;
        int n=nums.length;
        int maxLen = 0;
        while(r<n){
            if(nums[r] == 1){
                maxLen = Math.max(maxLen, r-l+1);
            }else{
                l = r+1;
            }
            r+=1;
        }
        return maxLen;
    }
}
//Set maxLen before resetting.
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int count=0;
        int maxLen=0;
        for(int i=0; i<nums.length; i++){
            if(nums[i]==1) {
                count+=1;
            }
            else {
                maxLen = Math.max(maxLen, count);
                count=0;
            }
        }
        maxLen = Math.max(maxLen, count);
        return maxLen;
    }
}
####################################################################################################################
2 Sum
3 Sum - 
Optimal solution - 
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        for(int i=0; i<n; i++){
            if(i != 0 && nums[i]==nums[i-1]) continue;
            int j = i+1;
            int k = n-1;
            while(j < k){
                int currSum = nums[i]+nums[j]+nums[k];
                if(currSum == 0){
                    ans.add(new ArrayList<>(Arrays.asList(nums[i], nums[j], nums[k])));
                    j += 1;
                    k -= 1;
                    while(j<k && nums[j]==nums[j-1]) j+=1;
                    while(j<k && nums[k]==nums[k+1]) k-=1;
                }else if(currSum > 0){
                    k -= 1;
                    while(j<k && nums[k]==nums[k+1]) k-=1;
                }else{
                    j+=1;
                    while(j<k && nums[j]==nums[j-1]) j+=1;
                }
            }
        }
        return ans;
    }
}
Other appoach - Not imp (Search for element within i and j)
public class tUf {
    public static List<List<Integer>> triplet(int n, int[] arr) {
        Set<List<Integer>> st = new HashSet<>();

        for (int i = 0; i < n; i++) {
            Set<Integer> hashset = new HashSet<>();
            for (int j = i + 1; j < n; j++) {
                //Calculate the 3rd element:
                int third = -(arr[i] + arr[j]);

                //Find the element in the set:
                if (hashset.contains(third)) {
                    List<Integer> temp = Arrays.asList(arr[i], arr[j], third);
                    temp.sort(null);
                    st.add(temp);
                }
                hashset.add(arr[j]);
            }
        }

        // store the set elements in the answer:
        List<List<Integer>> ans = new ArrayList<>(st);
        return ans;
    }
}
##############################################################################
4 Sum -
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        for(int i=0; i<n; i++){
            if(i!=0 && nums[i]==nums[i-1]) continue;
            for(int j=i+1; j<n; j++){
                if(j!=i+1 && nums[j]==nums[j-1]) continue;
                
                int k=j+1;
                int l=n-1;
                while(k<l){
                    long currSum = nums[i]+nums[j];
                    currSum += nums[k]+nums[l];
                    if(currSum == target){
                        ans.add(new ArrayList<>(Arrays.asList(nums[i], nums[j], nums[k], nums[l])));
                        k += 1;
                        l -= 1;
                        while(k<l && nums[k]==nums[k-1]) k+=1;
                        while(k<l && nums[l]==nums[l+1]) l-=1;
                    }else if(currSum < target){
                        k += 1;
                        while(k<l && nums[k]==nums[k-1]) k+=1;
                    }else{
                        l -= 1;
                        while(k<l && nums[l]==nums[l+1]) l-=1;
                    }
                }
            }
        }
        return ans;
    }
}
