sorting - insertion sort

median - heaps - 
Brute force - Use insertion sort to sort the array as and when new element is getting added.
Optimised - Use heaps.
class MedianFinder {
    PriorityQueue<Integer> maxHeap;//1st half, contains less elements
    PriorityQueue<Integer> minHeap;//2nd half, contains more elements
    public MedianFinder() {
        maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        minHeap = new PriorityQueue<>();
    }
    
    public void addNum(int num) {
        if(minHeap.size()==0) {
            minHeap.add(num);
            return;
        }
        if(num >= minHeap.peek()){
            minHeap.add(num);
        }else{
            maxHeap.add(num);
        }
        while(maxHeap.size()>minHeap.size()){
            int currVal = maxHeap.poll();
            minHeap.add(currVal);
        }
        while(minHeap.size()-maxHeap.size()>1){
            int currVal = minHeap.poll();
            maxHeap.add(currVal);
        }
    }
    
    public double findMedian() {
        if(maxHeap.size()==minHeap.size()){
            return ((double)(maxHeap.peek()+minHeap.peek()))/2;
        }
        return minHeap.peek();
    }
}

kth smallest/ largest - heaps
min of set of numbers where we add and remove elements - minStack, minHeap
Disjoint set - graphs (check if 2 vertices belong to same component)
Trie - check if a word is present or prefix is present or number of words with given prefix
