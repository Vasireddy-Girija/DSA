bubble sort - O(n*n)
selection sort
insertion sort
merge sort (recursive)
quick sort (recursive)

1.Bubble sort - For each iteration, move max element to last by swapping consecutive elements.
Avg. time complexity - O(n*n)
Worst time complexity - O(n*n) when array is in descending order.
Best time complexity - O(n) when array is already in ascending order,
for(int i=0; i<n; i++){
  boolean atleastOneSwap = false;
  for(int j=0; j<n-i-1; j++){
    if(arr[j] > arr[j+1]){
      swap(arr, i, i+1);
      atleastOneSwap = true;
    }
    if(!atleastOneSwap) break;
  }
}

2.Selection sort - Select max element(as the name selection sort) each time and put at the last index. 

3.Insertion sort - Treat the array as two parts - first part is always sorted and second array is unsorted. 
Take element from second array and put in first array such that first array maintains the sorted order.

4.Quick sort - Take the pivot element and put in the correct index. 
Elements before pivot element should be less than or equal to pivot element.
Element after pivot element should be greater than pivot element.

****Questions similar to partition of Quick Sort algo where 2 points start at the beginning -
Remove duplicates from array
class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        int idx = 0;
        for(int i=0; i<n; i++){
            if(nums[i] != nums[idx]){
                nums[idx+1] = nums[i];
                idx = idx+1;
            }
        }
        return idx+1;
    }
}
Move zeros to end -
class Solution {
    public void moveZeroes(int[] nums) {
        int n = nums.length;
        int idx = 0;
        for(int i=0; i<n; i++){
            if(nums[i] != 0){
                nums[idx] = nums[i];
                idx += 1;
            }
        }
        for(int i=idx; i<n; i++){
            nums[i] = 0;
        }
    }
}


5.Merge sort - Divide the array into 2 halves hypothetically and sort them and combine the two parts.

Merge sort variations -
1.Given two sorted arrays, find pairs such that arr1[i]>arr2[j]. 
This is a sub-problem to find all pairs of a single array where arr[i]>arr[j] and i<j, this array arr is not sorted.
class Solution {
    static int merge(int[] arr, int low, int mid, int high){
        int[] temp = new int[high-low+1];
        int k=0;
        int i=low;
        int j=mid+1;
        int count=0;
        while(i<=mid && j<=high){
            if(arr[i]>arr[j]){
                count += mid-i+1;
                temp[k]=arr[j];
                j+=1;
            }else{
                temp[k]=arr[i];
                i+=1;
            }
            k+=1;
        }
        while(i<=mid){
            temp[k]=arr[i];
            i+=1;
            k+=1;
        }
        while(j<=high){
            temp[k]=arr[j];
            j+=1;
            k+=1;
        }
        for(int l=low; l<=high; l++){
            arr[l] = temp[l-low];
        }
        return count;
    }
    static int mergeSort(int[] arr, int low, int high){
        if(low>=high) return 0;
        int mid = (low+high)/2;
        int left = mergeSort(arr, low, mid);
        int right = mergeSort(arr, mid+1, high);
        int count = merge(arr, low, mid, high);
        return left+right+count;
    }
    static int inversionCount(int arr[]) {
        return mergeSort(arr, 0, arr.length-1);
    }
}

2.Given two sorted arrays, find pairs such that arr1[i]>2*arr2[j]. 
This is a sub-problem to find all pairs of a single array where arr[i]>2*arr[j] and i<j, this array arr is not sorted.
While comparing arr[i]>2*arr[j], we write it as arr[i]>2*(long)arr[j] for int max and min to work.
class Solution {
    public void merge(int[] arr, int low, int mid, int high){
        int i=low;
        int j=mid+1;
        int k=0;
        int[] temp = new int[high-low+1];
        while(i<=mid && j<=high){
            if(arr[i]>arr[j]){
                temp[k] = arr[j];
                j+=1;
            }else{
                temp[k] = arr[i];
                i+=1;
            }
            k+=1;
        }
        while(i<=mid){
            temp[k]=arr[i];
            i+=1;
            k+=1;
        }
        while(j<=high){
            temp[k]=arr[j];
            j+=1;
            k+=1;
        }
        for(int m=low; m<=high; m++){
            arr[m] = temp[m-low];
        }
    }
    public int countInversions(int[] arr, int low, int mid, int high){
        int i=low;
        int j=mid+1;
        int count=0;
        while(i<=mid && j<=high){
            if(arr[i]>2*(long)arr[j]){
                count += (mid-i+1);
                j+=1;
                continue;
            }
            if(arr[i]>=arr[j]){
                i+=1;
                continue;
            }
            if(arr[i]<arr[j]){
                i+=1;
                continue;
            }
        }
        return count;
    }
    public int mergeSort(int[] nums, int low, int high){
        if(low == high) return 0;
        int mid = (high+low)/2;
        int left = mergeSort(nums, low, mid);
        int right = mergeSort(nums, mid+1, high);
        int count = countInversions(nums, low, mid, high);
        merge(nums, low, mid, high);
        return left+right+count;
    }
    public int reversePairs(int[] nums) {
        return mergeSort(nums, 0, nums.length-1);
    }
}

3.Merge two sorted arrays such that merged array should not have duplicates. U can have duplicates in individual arrays.
class Solution {
    public static ArrayList<Integer> findUnion(int a[], int b[]) {
        int k=0;
        ArrayList<Integer> lst = new ArrayList<>();
        int i=0;
        int j=0;
        while(i<a.length && j<b.length){
            if(a[i]<b[j]){
                if(k==0 || lst.get(k-1)!=a[i]){
                    lst.add(a[i]);
                    k+=1;
                }
                i += 1;
            }else{
                if(k==0 || lst.get(k-1)!=b[j]){
                    lst.add(b[j]);
                    k+=1;
                }
                j += 1;
            }
        }
        while(i<a.length){
            if(k==0 || lst.get(k-1)!=a[i]){
                    lst.add(a[i]);
                    k+=1;
                }
            i += 1;
        }
        while(j<b.length){
            if(k==0 || lst.get(k-1)!=b[j]){
                    lst.add(b[j]);
                    k+=1;
                }
            j += 1;
        }
        return lst;
    }
}

Java
Collections.sort(lst) -> Sorts lst in ascending order
Collections.sort(lst, Collections.reverseOrder()) -> Sorts lst in descending order
Arrays.sort(arr) -> Sorts arr in ascending order, primitive or non-primitive it works.
Arrays.sort(arr, Collections.reverseOrder()) -> Works only for non-primitives.
For primitives values to sort, sort in descending oder and write a reverse method (OR) 
convert primitive(int) arr to non-primitive(Integer) arr and use Arrays.sort with comparator
