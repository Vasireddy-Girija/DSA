bubble sort - O(n*n)
selection sort
insertion sort
merge sort (recursive)
quick sort (recursive)

1.Bubble sort - For each iteration, move max element to last by swapping consecutive elements.
Avg. time complexity - O(n*n)
Worst time complexity - O(n*n) when array is in descending order.
Best time complexity - O(n) when array is already in ascending order,
for(int i=0; i<n; i++){
  boolean atleastOneSwap = false;
  for(int j=0; j<n-i-1; j++){
    if(arr[j] > arr[j+1]){
      swap(arr, i, i+1);
      atleastOneSwap = true;
    }
    if(!atleastOneSwap) break;
  }
}

2.Selection sort - Select max element(as the name selection sort) each time and put at the last index. 

3.Insertion sort - Treat the array as two parts - first part is always sorted and second array is unsorted. 
Take element from second array and put in first array such that first array maintains the sorted order.

4.Quick sort - Take the pivot element and put in the correct index. 
Elements before pivot element should be less than or equal to pivot element.
Element after pivot element should be greater than pivot element.

****Questions similar to partition of Quick Sort algo where 2 points start at the beginning -
Remove duplicates from array
class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        int idx = 0;
        for(int i=0; i<n; i++){
            if(nums[i] != nums[idx]){
                nums[idx+1] = nums[i];
                idx = idx+1;
            }
        }
        return idx+1;
    }
}
Move zeros to end -
class Solution {
    public void moveZeroes(int[] nums) {
        int n = nums.length;
        int idx = 0;
        for(int i=0; i<n; i++){
            if(nums[i] != 0){
                nums[idx] = nums[i];
                idx += 1;
            }
        }
        for(int i=idx; i<n; i++){
            nums[i] = 0;
        }
    }
}


5.Merge sort - Divide the array into 2 halves hypothetically and sort them and combine the two parts.

Merge sort variations -
1.Given two sorted arrays, find pairs such that arr1[i]>arr2[j]. 
This is a sub-problem to find all pairs of a single array where arr[i]>arr[j] and i<j, this array arr is not sorted.

2.Given two sorted arrays, find pairs such that arr1[i]>2*arr2[j]. 
This is a sub-problem to find all pairs of a single array where arr[i]>2*arr[j] and i<j, this array arr is not sorted.


Java
Collections.sort(lst) -> Sorts lst in ascending order
Collections.sort(lst, Collections.reverseOrder()) -> Sorts lst in descending order
Arrays.sort(arr) -> Sorts arr in ascending order, primitive or non-primitive it works.
Arrays.sort(arr, Collections.reverseOrder()) -> Works only for non-primitives.
For primitives values to sort, sort in descending oder and write a reverse method (OR) 
convert primitive(int) arr to non-primitive(Integer) arr and use Arrays.sort with comparator
