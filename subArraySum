subArray sum - sliding window, subsequence sum - DP

2 types -
1.Find longest subArray whose sum = k 
2.Find count of subArrays whose sum = k

How to solve it depends on the range of array values.
#########################################################################################################
Find maxLen of subArray whose sum is k
#########################################################################################################
Brute force - O(N*N)
class Solution {
    public int lenOfLongestSubarr(int[] arr, int k) {
        int n = arr.length;
        int maxLen =0;
        for(int i=0; i<n; i++){
            int sum = 0;
            for(int j=i; j<n; j++){
                sum += arr[j];
                if(sum==k) maxLen = Math.max(maxLen, j-i+1); // not breaking here to handle elements which are 0.
                if(sum > k) break;
            }
        }
        return maxLen;
    }
}

case-1: To find maxLen if array values are positive (>0), case-2: if array values are positive and 0
class Solution {
    public int lenOfLongestSubarr(int[] arr, int k) {
        int l = 0;
        int r = 0;
        int maxLen = 0;
        int sum = 0;
        while(r<arr.length){
            sum += arr[r];
            while(sum > k){
                sum -= arr[l];
                l += 1;
            }
            if(sum==k) maxLen = Math.max(maxLen, r-l+1);
            r += 1;
        }
        return maxLen;
    }
}

case-3: if array values are positives, 0, negatives. Use prefix sum. TC-O(N),SC-O(N)
class Solution {
    public int lenOfLongestSubarr(int[] arr, int k) {
        Map<Integer, Integer> prefixSumMap = new HashMap<>();
        int maxLen = 0;
        int sum = 0;
        for(int i=0; i< arr.length; i++){
            sum += arr[i];
            if(sum == k) maxLen = Math.max(maxLen, i+1);
            else if(prefixSumMap.containsKey(sum-k)){
                maxLen = Math.max(maxLen, i-prefixSumMap.get(sum-k));
            }
            //Always have the first occurrence in map,which can give maxLen.
            if(!prefixSumMap.containsKey(sum)){
                prefixSumMap.put(sum, i);
            }
        }
        return maxLen;
    }
}
#########################################################################################################
Find number of subArray whose sum is k
#########################################################################################################
case-1: sliding window two pointer
case-2: sliding window two pointer - calculate for <=k and <=k-1
case-3: Take map. Take map with val & count 
class Solution {
    public int subarraySum(int[] nums, int k) {
        Map<Integer, Integer> prefixSumCountMap = new HashMap<>();
        int prefixSum = 0;
        int count = 0;
        for(int num: nums){
            prefixSum += num;
            if(prefixSum == k) count += 1; //Count before putting intp map as map might not contain prefixSum with 0.
            if(prefixSumCountMap.containsKey(prefixSum-k)){
                count += prefixSumCountMap.get(prefixSum-k);
            }
            prefixSumCountMap.put(prefixSum, prefixSumCountMap.getOrDefault(prefixSum, 0)+1);
        }
        return count;
    }
}


#####
Find length of subArray with max. sum - Kadane's algorithm 
If all positives and zeroes, total sum of array is the max sum.
Subarray with a sum less than 0 will always reduce our answer and so this type of subarray cannot be a part of the subarray with maximum sum.
public class Main {
    public static long maxSubarraySum(int[] arr, int n) {
        long maxi = Long.MIN_VALUE; // maximum sum
        long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            if (sum > maxi) {
                maxi = sum;
            }
            // If sum < 0: discard the sum calculated
            if (sum < 0) {
                sum = 0;
            }
        }
        // To consider the sum of the empty subarray
        // uncomment the following check:
        //if (maxi < 0) maxi = 0;
        return maxi;
    }
}
Find this subarray -
public class Main {
    public static long maxSubarraySum(int[] arr, int n) {
        long maxi = Long.MIN_VALUE; // maximum sum
        long sum = 0;
        int start = -1;
        int ansStart = -1;
        int ansEnd = -1;
        for (int i = 0; i < n; i++) {
            if(sum == 0) start=i;
            sum += arr[i];
            if (sum > maxi) {
                maxi = sum;
                ansStart = start;
                ansEnd = i;
            }
            // If sum < 0: discard the sum calculated
            if (sum < 0) {
                sum = 0;
            }
        }
        // To consider the sum of the empty subarray
        // uncomment the following check:
        //if (maxi < 0) maxi = 0;
        return maxi;
    }
}
#####
TC - O(N * log(sum(arr)-max(arr)))
Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.
Return the minimized largest sum of the split.A subarray is a contiguous part of the array.

class Solution {
    public int partitionCount(int[] nums, int maxSumAllowed){
        int currSum = 0;
        int partitionCount = 0;
        for(int num: nums){
            if(currSum+num <= maxSumAllowed){
                currSum += num;
            }else{
                partitionCount += 1;
                currSum = num;
            }
        }
        if(currSum <= maxSumAllowed){
            partitionCount += 1;
        }
        return partitionCount;
    }
    public int splitArray(int[] nums, int k) {
      int maxVal = 0;
      int sum = 0;
      for(int num: nums){
        maxVal = Math.max(maxVal, num);
        sum += num;
      }
      int low =  maxVal;
      int high = sum;
      while(low <= high){
        int mid = low+(high-low)/2;
        if(partitionCount(nums, mid)>k) low=mid+1;
        else high = mid-1;
      }
      return low;
    }
}

