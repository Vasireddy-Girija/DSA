If we want insert and delete operations in O(1), use DLL with map. This map stores reference to DLL node.

class Node{
  int data;
  Node prev;
  Node next;

  Node(int data){
    this.data = data;
  }
}

****************LRU Cache*******************
class DLLNode{
    int key; //imp as we should have this key to remove from map when capacity exceeded.
    int value; 
    DLLNode prev;
    DLLNode next;
    DLLNode(int key, int value){
        this.key = key;
        this.value = value;
    }
}
class LRUCache {
    int capacity;
    DLLNode head; //head pointer is imp as we will add to head.next everytime we use get or put.
    DLLNode tail; //tail pointer is imp as we will remove from tail.prev if capacity exceeded.
    Map<Integer, DLLNode> DLLNodeMap = new HashMap<>(); //size of map will be same as current capacity. Imp to get exact location of node.
    public LRUCache(int capacity) {
        this.capacity = capacity;
        head = new DLLNode(-1, -1);//For insert and remove to be simpler.
        tail = new DLLNode(-1, -1);//For insert and remove to be simpler.
        head.next = tail;
        tail.prev = head;
    }
    public void remove(DLLNode node){
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    public void insertAtHead(DLLNode node){
        node.next = head.next;
        head.next.prev = node;
        node.prev = head;
        head.next = node;
    }
    public int get(int key) {
        if(DLLNodeMap.containsKey(key)){
            DLLNode currNode = DLLNodeMap.get(key);
            remove(currNode);
            insertAtHead(currNode);
            return currNode.value;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        if(DLLNodeMap.containsKey(key)){
            DLLNode currNode = DLLNodeMap.get(key);
            remove(currNode);
        }
        DLLNode newNode = new DLLNode(key, value);
        insertAtHead(newNode);
        DLLNodeMap.put(key, newNode);
        if(DLLNodeMap.size()>capacity){
            DLLNodeMap.remove(tail.prev.key);
            remove(tail.prev);
        }
    }
}

Construct a DLL from array -
class Solution {
    Node constructDLL(int arr[]) {
        Node dummy = new Node(-1);
        Node temp = dummy;
        for(int element: arr){
            Node newNode = new Node(element);
            newNode.prev = temp;
            temp.next = newNode;
            temp = temp.next;
        }
        if(dummy.next != null) dummy.next.prev = null;
        return dummy.next;
    }
}

Insert a node in DLL - O(n)
Insert it after pth position 0-based indexing. If p==0; insert element after head.
class Solution {
    Node addNode(Node head, int p, int x) {
        if(p==-1 || head==null){
            Node newNode = new Node(x);
            if(head != null) head.prev = newNode;
            newNode.next = head;
            return newNode;
        }
        Node temp = head;
        int count = 0;
        while(temp != null){
            if(count == p){
                Node next = temp.next;
                Node newNode = new Node(x);
                temp.next = newNode;
                newNode.prev = temp;
                newNode.next = next;
            }
            count += 1;
            temp = temp.next;
        }
        return head;
    }
}

Delete node from DLL at position x (1-based indexing) - O(n)
class Solution {
    public Node deleteNode(Node head, int x) {
        if(x == 1){
            head = head.next;
            head.prev = null;
            return head;
        }
        Node temp = head;
        int count = 1;
        while(temp != null){
            if(count == x){
                if(temp.prev != null) temp.prev.next = temp.next;
                if(temp.next != null) temp.next.prev = temp.prev;
                return head;
            }
            count += 1;
            temp = temp.next;
        }
        return head;
    }
}

Reverse a DLL - Change next to prev and prev to next.
class Solution {
    public DLLNode reverseDLL(DLLNode head) {
        DLLNode temp = head;
        while(temp.next != null){
            DLLNode currPrev = temp.prev;
            DLLNode currNext = temp.next;
            temp.prev = currNext;
            temp.next =  currPrev;
            temp = currNext;
        }
        temp.next = temp.prev;
        temp.prev = null;
        return temp;
    }
}

Delete all occurrences of element in DLL - O(n)
class Solution {
    static Node deleteAllOccurOfX(Node head, int x) {
        Node dummyHead = new Node();
        dummyHead.prev = null;
        dummyHead.next = head;
        head.prev = dummyHead;
        
        Node temp = head;
        while(temp != null){
            if(temp.data == x){
                if(temp.prev != null) temp.prev.next = temp.next;
                if(temp.next != null) temp.next.prev = temp.prev;
            }
            temp = temp.next;
        }
        dummyHead.next.prev = null;
        return dummyHead.next;
    }
}

2 Sum in sorted DLL - Find all pairs whose target equals k.
class Solution {
    public static ArrayList<ArrayList<Integer>> findPairsWithGivenSum(int target, Node head) {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        Node startPointer = head;
        Node temp = head;
        while(temp.next != null){
            temp = temp.next;
        }
        Node endPointer = temp;
        while(startPointer != endPointer){
            int currSum = startPointer.data + endPointer.data;
            if(currSum == target){
                ans.add(new ArrayList<>(Arrays.asList(startPointer.data, endPointer.data)));
                startPointer = startPointer.next;
            }
            else if(currSum > target){
                endPointer = endPointer.prev;
            }else{
                startPointer = startPointer.next;
            }
        }
        return ans;
    }
}
