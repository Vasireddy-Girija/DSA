Longest palindromic substring -
Brute force - find all substrings and for each substring, check if it is a palindrome - O(n3)
TC - O(n2)
class Solution {
    public String longestPalindrome(String s) {
        int maxLen = 0;
        String ans = "";
        for(int i=0; i<s.length(); i++){
            //odd length
            int l = i;
            int r = i;
            while(l>=0 && r<s.length() && s.charAt(l)==s.charAt(r)){
                if(maxLen < r-l+1){
                    maxLen = r-l+1;
                    ans = s.substring(l, r+1);
                }
                l -= 1;
                r += 1;
            }
            //even length
            l = i;
            r = i+1;
            while(l>=0 && r<s.length() && s.charAt(l)==s.charAt(r)){
                if(maxLen < r-l+1){
                    maxLen = r-l+1;
                    ans = s.substring(l, r+1);
                }
                l -= 1;
                r += 1;
            }
        }
        return ans;
    }
}

Count num of palindromic subStrings in a string -
Brute force - find all substrings and check if each is palindrome - O(n3)
Optimal - Use the above approach, take center element and expand it for even and odd separately. - O(n2)
class Solution {
    public int countSubstrings(String s) {
        int n = s.length();
        int count = 0;
        for(int i=0; i<n; i++){
            int l = i;
            int r = i;
            while(l>=0 && r<n && s.charAt(l)==s.charAt(r)){
                count += 1;
                l -= 1;
                r += 1;
            }

            l = i;
            r = i+1;
            while(l>=0 && r<n && s.charAt(l)==s.charAt(r)){
                count += 1;
                l -= 1;
                r += 1;
            }
        }
        return count;
    }
}
