Longest palindromic substring -
Brute force - find all substrings and for each substring, check if it is a palindrome - O(n3)
TC - O(n2)
class Solution {
    public String longestPalindrome(String s) {
        int maxLen = 0;
        String ans = "";
        for(int i=0; i<s.length(); i++){
            //odd length
            int l = i;
            int r = i;
            while(l>=0 && r<s.length() && s.charAt(l)==s.charAt(r)){
                if(maxLen < r-l+1){
                    maxLen = r-l+1;
                    ans = s.substring(l, r+1);
                }
                l -= 1;
                r += 1;
            }
            //even length
            l = i;
            r = i+1;
            while(l>=0 && r<s.length() && s.charAt(l)==s.charAt(r)){
                if(maxLen < r-l+1){
                    maxLen = r-l+1;
                    ans = s.substring(l, r+1);
                }
                l -= 1;
                r += 1;
            }
        }
        return ans;
    }
}

Count num of palindromic subStrings in a string -
Brute force - find all substrings and check if each is palindrome - O(n3)
Optimal - Use the above approach, take center element and expand it for even and odd separately. - O(n2)
class Solution {
    public int countSubstrings(String s) {
        int n = s.length();
        int count = 0;
        for(int i=0; i<n; i++){
            int l = i;
            int r = i;
            while(l>=0 && r<n && s.charAt(l)==s.charAt(r)){
                count += 1;
                l -= 1;
                r += 1;
            }

            l = i;
            r = i+1;
            while(l>=0 && r<n && s.charAt(l)==s.charAt(r)){
                count += 1;
                l -= 1;
                r += 1;
            }
        }
        return count;
    }
}

Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.
TC - ?
class Solution {
    public boolean isPalindrome(String str, int startIdx, int endIdx){
        while(startIdx<=endIdx){
            if(str.charAt(startIdx) != str.charAt(endIdx)) return false;
            startIdx += 1;
            endIdx -= 1;
        }
        return true;
    }
    public void recFunc(String str, int startIdx, int endIdx, List<String> subAns, List<List<String>> ans){
        if(startIdx > endIdx){
            ans.add(new ArrayList<>(subAns));
            return;
        }
        for(int i=startIdx; i<=endIdx; i++){
            if(isPalindrome(str, startIdx, i)){
                subAns.add(str.substring(startIdx, i+1));
                recFunc(str, i+1, endIdx, subAns, ans);
                subAns.remove(subAns.size()-1);
            }
        }
    }
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> subAns = new ArrayList<>();
        recFunc(s, 0, s.length()-1, subAns, ans);
        return ans;
    }
}
