When to think if this can be solved using binary seach - 
Sorted Array, Rotated sorted array
Time Complexity - log(n)
Max or min (binary search on answers)


Binary Search algo - O(logn)
class Solution {
    public int search(int[] nums, int target) {
        int low = 0;
        int high = nums.length-1;
        while(low <= high){
            int mid = low+(high-low)/2;
            if(nums[mid]==target) return mid;
            if(nums[mid]>target) high=mid-1;
            else low = mid+1;
        }
        return -1;
    }
}

Find floor and ceil - In binary search also, return high at the end for floor and return low for ceil.
If num don't exist, based on the search key, low can go to n and high can go to -1 and stop.

Find the first and last occurrence of an element in sorted array-
First find firstOccurrence. If firstOccurrence idx is in bounds and its value is same as target
(i.e atleast one element which is same sa target is present in the array), then find lastOccurrence.
Note- Since we are not returning when we find idx whaose value is target, use if else-if else and not if if else.
class Solution {
    public int firstOccurrenceIdx(int[] arr, int target){
        int low = 0;
        int high = arr.length-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(arr[mid]==target) high=mid-1;
            else if(arr[mid]>target) high=mid-1;
            else low=mid+1;
        }
        return low;
    }
    public int lastOccurrenceIdx(int[] arr, int target){
        int low = 0;
        int high = arr.length-1;
        while(low <= high){
            int mid = low+(high-low)/2;
            if(arr[mid]==target) low=mid+1;
            else if(arr[mid]>target) high=mid-1;
            else low=mid+1;
        }
        return high;
    }
    public int[] searchRange(int[] nums, int target) {
        int firstOccurrenceIdx = firstOccurrenceIdx(nums, target);
        if(firstOccurrenceIdx < 0 || firstOccurrenceIdx == nums.length) return new int[]{-1,-1};
        if(nums[firstOccurrenceIdx] != target) return new int[]{-1, -1};
        int lastOccurrenceIdx = lastOccurrenceIdx(nums, target);
        return new int[]{firstOccurrenceIdx, lastOccurrenceIdx};
    }
}

Count num of occurrences of element in sorted array - find firstOccurrence, do checks, if valid, find lastOccurrence.
ans will be lastOccurrence-firstOccurrence+1;


