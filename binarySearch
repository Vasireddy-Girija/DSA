When to think if this can be solved using binary seach - 
Sorted Array - search for element, firstOccurrence, lastOccurrence, number of occurrences
Rotated sorted array - search for element in unique, search for element in duplicates, min element in unique, how many times arr was rotated.
Time Complexity - log(n)
Max or min (binary search on answers)

The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, 
thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is 
not present in that half.

In binary search, for every iteration, we should be able to lower the search space by half. This yields to logn time complexity.
low=0, high=n-1, mid=low+(high-low)/2. mid is calculated this way so that it doesn't overflow where high+low can be more than Integer.MAX_VALUE.

while returning ans, if the condition for mid has mid-1 and mid+1, handle cases for 0,n-1 separately and start binary search from 
low = 1 and high=n-2. Similiar to problems in find single element and peak element.

In most ans, we will return either low or high. If low satisfies condition at the beginning and high doesn't, then return high and viceversa.
Basically, we'll have to return the reverse. Binary Search stops there.

Binary Search algo - O(logn)
class Solution {
    public int search(int[] nums, int target) {
        int low = 0;
        int high = nums.length-1;
        while(low <= high){
            int mid = low+(high-low)/2;
            if(nums[mid]==target) return mid;
            if(nums[mid]>target) high=mid-1;
            else low = mid+1;
        }
        return -1;
    }
}

Find floor and ceil - In binary search also, return high at the end for floor and return low for ceil.
If num don't exist, based on the search key, low can go to n and high can go to -1 and stop.

Find the first and last occurrence of an element in sorted array-
First find firstOccurrence. If firstOccurrence idx is in bounds and its value is same as target
(i.e atleast one element which is same sa target is present in the array), then find lastOccurrence.
Note- Since we are not returning when we find idx whaose value is target, use if else-if else and not if if else.
class Solution {
    public int firstOccurrenceIdx(int[] arr, int target){
        int low = 0;
        int high = arr.length-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(arr[mid]==target) high=mid-1;
            else if(arr[mid]>target) high=mid-1;
            else low=mid+1;
        }
        return low;
    }
    public int lastOccurrenceIdx(int[] arr, int target){
        int low = 0;
        int high = arr.length-1;
        while(low <= high){
            int mid = low+(high-low)/2;
            if(arr[mid]==target) low=mid+1;
            else if(arr[mid]>target) high=mid-1;
            else low=mid+1;
        }
        return high;
    }
    public int[] searchRange(int[] nums, int target) {
        int firstOccurrenceIdx = firstOccurrenceIdx(nums, target);
        if(firstOccurrenceIdx < 0 || firstOccurrenceIdx == nums.length) return new int[]{-1,-1};
        if(nums[firstOccurrenceIdx] != target) return new int[]{-1, -1};
        int lastOccurrenceIdx = lastOccurrenceIdx(nums, target);
        return new int[]{firstOccurrenceIdx, lastOccurrenceIdx};
    }
}

Count num of occurrences of element in sorted array - find firstOccurrence, do checks, if valid, find lastOccurrence.
ans will be lastOccurrence-firstOccurrence+1;

Rotated sorted array -
1.Distinct values -
class Solution {
    public int search(int[] nums, int target) {
        int low = 0;
        int high = nums.length-1;
        while(low <= high){
            int mid = low+(high-low)/2;
            if(target==nums[mid]) return mid;
            //left side is sorted
            if(nums[low]<=nums[mid]){
                if(target>=nums[low] && target<nums[mid]) high=mid-1;
                else low=mid+1;
            //right side is sorted
            }else if(nums[high]>=nums[mid]){
                if(target>nums[mid] && target<=nums[high]) low=mid+1;
                else high=mid-1;
            }
        }
        return -1;
    }
}

2.Duplicate values -
If low, high, mid values all are equal, we will not know which part is sorted.
Example - [2,2,2,4,2], [2,4,2,2,2]. So remove elements from left, right until they are mid==low==high doesn't hold true.
Example - [2,3,4,5,2] - Even if low and high are same, but mid is not equal to that, we'll be able to say which part is sorted.
Avg. time complexity - O(logn)
Worst case time complexity - O(N/2) for arr=[3,3,3,3,3] and target=2.
class Solution {
    public boolean search(int[] nums, int target) {
        int n = nums.length;
        int low =0; 
        int high = n-1;
        while(low <= high){
            int mid = low+(high-low)/2;
            if(nums[mid]==target) return true;
            if(nums[low]==nums[mid] && nums[high]==nums[mid]){
                low += 1;
                high -= 1;
                continue;
            }
            if(nums[low]<=nums[mid]){
                if(target>=nums[low] && target<nums[mid]) high=mid-1;
                else low=mid+1;
            }else if(nums[high]>=nums[mid]){
                if(target>nums[mid] && target<=nums[high]) low=mid+1;
                else high=mid-1;
            }
        }
        return false;
    }
}

3.Find min in rotated sorted array - TC - O(logn)
Min element will be less than its left and right element if it has unique elements.
For unique elements, if arr[low]<=arr[high], then arr[low] will be min. (or eual to case covers when low is same as high)
if left half is sorted, take min element and search in right half.
if right half is sorted, take min element and search in left half.
class Solution {
    public int findMin(int[] nums) {
        int ans = Integer.MAX_VALUE;
        int low=0;
        int high=nums.length-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(nums[low]<=nums[high]){
                ans = Math.min(ans, nums[low]);
                break;
            }
            if(nums[low]<=nums[mid]){
                ans = Math.min(ans, nums[low]);
                low = mid+1;
            }else if(nums[mid]<=nums[high]){
                ans = Math.min(ans, nums[mid]);
                high = mid-1;
            }
        }
        return ans;
    }
}

To find how many times, sorted arr is rotated, find index of min element.
Take ansIdx along with ans. Keep updating ansIdx when ans is updated.
If arr is right rotated, ansIdx is the ans. If arr is left rotated, n-ansIdx will be the number of left rotations.

Single element in a sorted array - This array has every element 2 times except one element. Find that one element.
public class tUf {
    public static int singleNonDuplicate(ArrayList<Integer> arr) {
        int n = arr.size(); // Size of the array.

        // Edge cases:
        if (n == 1)
            return arr.get(0);
        if (!arr.get(0).equals(arr.get(1)))
            return arr.get(0);
        if (!arr.get(n - 1).equals(arr.get(n - 2)))
            return arr.get(n - 1);

        int low = 1, high = n - 2;
        while (low <= high) {
            int mid = (low + high) / 2;

            // If arr[mid] is the single element:
            if (!arr.get(mid).equals(arr.get(mid + 1)) && !arr.get(mid).equals(arr.get(mid - 1))) {
                return arr.get(mid);
            }

            // We are in the left:
            if ((mid % 2 == 1 && arr.get(mid).equals(arr.get(mid - 1)))
                    || (mid % 2 == 0 && arr.get(mid).equals(arr.get(mid + 1)))) {
                // Eliminate the left half:
                low = mid + 1;
            }
            // We are in the right:
            else {
                // Eliminate the right half:
                high = mid - 1;
            }
        }

        // Dummy return statement:
        return -1;
    }

Find peak element - find an element where it is strictly greater than its neighbours.
Imp condition - nums[i] != nums[i + 1] for all valid i. - So we can eliminate one half every time. 
If nums[i]==nums[i+1], we will not be sure which side to go.
4 changes - mid can be peak, can be in increasing trend, can be in decreasing trend, can be min peak.
class Solution {
    public int findPeakElement(int[] nums) {
        int n = nums.length;
        if(n==1) return 0;
        if(nums[0]>nums[1]) return 0;
        if(nums[n-1]>nums[n-2]) return n-1;

        int low = 1;
        int high = n-2;
        while(low <= high){
            int mid = low + (high-low)/2;
            if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1]) return mid;
            if(nums[mid]>nums[mid-1]) low = mid+1;
            if(nums[mid]>nums[mid+1]) high = mid-1;
            if(nums[mid]<nums[mid-1] && nums[mid]<nums[mid+1]) high = mid-1; //we can go to any half.
        }
        return -1;
    }
}

#################################################################################################################################
BINARY SEARCH ON ANSWERS - If answer has a range in sorted order and the element of interest moves in one direction within that range mostly.
Square root of n - low=0, high=n, if(mid*mid==n) return mid.
Nth root of a num - TC - n(logm)
class Solution
{
    public int NthRoot(int n, int m)
    {
        int low = 0;
        int high = m;
        while(low <= high){
            int mid = low + (high-low)/2;
            int powerVal = (int)Math.pow(mid, n);
            if(powerVal == m) return mid;
            if(powerVal > m) high=mid-1;
            else low=mid+1;
        }
        return -1;
    }
}

If ans has a range and we take one of the answers and check it with some threhold/condition given in the question.
range - (min, max) or (min, sum) or (1, max)

#################################################################################################################################
MAX OF MIN, MIN OF MAX - Questions where split is done by taking continuous portions.
TC - O(N * log(sum(arr)-max(arr)))
Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.
Return the minimized largest sum of the split.A subarray is a contiguous part of the array.
If low won't be an ans at the beginning, return low at the end and viceversa.

class Solution {
    public int partitionCount(int[] nums, int maxSumAllowed){
        int currSum = 0;
        int partitionCount = 0;
        for(int num: nums){
            if(currSum+num <= maxSumAllowed){
                currSum += num;
            }else{
                partitionCount += 1;
                currSum = num;
            }
        }
        if(currSum <= maxSumAllowed){
            partitionCount += 1;
        }
        return partitionCount;
    }
    public int splitArray(int[] nums, int k) {
      int maxVal = 0;
      int sum = 0;
      for(int num: nums){
        maxVal = Math.max(maxVal, num);
        sum += num;
      }
      int low =  maxVal;
      int high = sum;
      while(low <= high){
        int mid = low+(high-low)/2;
        if(partitionCount(nums, mid)>k) low=mid+1;
        else high = mid-1;
      }
      return low;
    }
}

#################################################################################################################################
Median of 2 sorted arrays - TC - O(min(m,n)) where m and n are len of arrays.
We will apply binary search based on length of first array. So let's choose min length of the array.
While doing binary search, if we take x elements from 1st array, we will take (n+m)/2-x elements from 2nd array.
The mid we calculate will be the partition. We will have left element of partition as arr[mid-1] and right element as arr[mid].
mid1 is calculated based on binary search. mid2 is calculated such that number of elements in left part would be (n+m)/2.
Condition for valid split - max(l1, l2)<=min(r1, r2) i.e all left elements are smaller or equal to right elements.
For binary search, if l1>r2, then we should reduce elements in arr1, so high=mid1-1.
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        if(m > n) return findMedianSortedArrays(nums2, nums1);
        int numLeftElements = (m+n+1)/2; //handles even and odd case.
        int low = 0;
        int high = m;//as all m elements can be in one half.
        //Here low and high are not indexes. It is pointer where we can partition.
        while(low<=high){
            int mid1 = low+(high-low)/2;
            int mid2 = numLeftElements-mid1; 
            //It is always taken care that elements before mid1 and elements before mid2 would
            //be total of numLeftElements.
            int l1 = mid1>0 ? nums1[mid1-1]: Integer.MIN_VALUE;
            int l2 = mid2>0 ? nums2[mid2-1]: Integer.MIN_VALUE;
            int r1 = mid1<m ? nums1[mid1]: Integer.MAX_VALUE;
            int r2 = mid2<n ? nums2[mid2]: Integer.MAX_VALUE;

            if(l1<=r2 && l2<=r1){
                if((n+m)%2 == 1) return Math.max(l1, l2);
                return ((double)(Math.max(l1, l2)+Math.min(r1, r2)))/2;
            }

            if(l1>r2) high = mid1-1;
            else low = mid1+1;
        }
        return -1;
    }
}

kth element of 2 sorted arrays - follow median of 2 sorted arrays. - TC O(min(m,n))
Check if mid2 is possible before continuing.
class Solution {
    public long kthElement(int k, int arr1[], int arr2[]) {
        int m = arr1.length;
        int n = arr2.length;
        if(m>n) return kthElement(k, arr2, arr1);
        int low = 0;
        int high = m;
        while(low <= high){
            int mid1 = low+(high-low)/2;
            int totalLeftElements = k;
            int mid2 = k-mid1;
            if(mid2<0){
                high = mid1-1;
                continue;
            }
            if(mid2>n){
                low = mid1+1;
                continue;
            }
            int l1 = mid1>0 ? arr1[mid1-1] : Integer.MIN_VALUE;
            int l2 = mid2>0 ? arr2[mid2-1] : Integer.MIN_VALUE;
            int r1 = mid1<m ? arr1[mid1] : Integer.MAX_VALUE;
            int r2 = mid2<n ? arr2[mid2] : Integer.MAX_VALUE;
            if(l1<=r2 && l2<=r1){
                return Math.max(l1, l2);
            }
            if(l1>r2) high = mid1-1;
            else low = mid1+1;
        }
        return -1;
    }
}
