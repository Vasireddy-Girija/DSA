Taking greedy step at each step should lead to the ans.

Check if 2 intervals are overlapping - [2, 10], [1, 12] -> Max(start_times) <= Min(end_times) If we don't know start_time of 2nd interval is more then start_time of 1st interval.
If we know start_times are sorted, start_time_of_2 <= end_time_of_1 will say if intervals are overlapping.

1. N meetings in a room - TC O(N) - Sort based on end times. 
*****This question is same as remove min intervals from an interval arr such that rest all intervals are non-overlapping.
Analogy - If a single person wants to attend max meetngs, he will greedily go to meeting that ends first.
class Interval{
    int start;
    int end;
    Interval(int start, int end){
        this.start = start;
        this.end = end;
    }
}
class Solution {
    // Function to find the maximum number of meetings that can
    // be performed in a meeting room.
    public int maxMeetings(int start[], int end[]) {
        int n = start.length;
        if(n==0 || n== 1) return n;
        Interval[] intervalArr = new Interval[n];
        for(int i=0; i<n; i++){
            intervalArr[i] = new Interval(start[i], end[i]);
        }
        Comparator<Interval> comp = (a,b)->(a.end-b.end);
        Arrays.sort(intervalArr, comp);
        
        int numberOfMeetings = 1;
        int currEnd = intervalArr[0].end;
        for(int i=1; i<n; i++){
            if(intervalArr[i].start > currEnd){
                numberOfMeetings += 1;
                currEnd = intervalArr[i].end;
            }
        }
        
        return numberOfMeetings;
    }
}

Min platforms - sort based on start times for brute force.
TC - O(logn)
class Solution {
    static int findPlatform(int arr[], int dep[]) {
        Arrays.sort(arr);
        Arrays.sort(dep);
        int arrivalPointer = 0;
        int departurePointer = -1;
        int currTrainCount = 1; (how many of arrival are departed).
        while(arrivalPointer < arr.length-1){
            if(arr[arrivalPointer+1] <= dep[departurePointer+1]){ //If arrival and departure times are same, we need new platform. So incrementing arrivalPointer.
                arrivalPointer += 1;
                currTrainCount = Math.max(currTrainCount, arrivalPointer-departurePointer);
            }else{
                departurePointer += 1;
            }
        }
        return currTrainCount;
    }
}

Alternate solution - 
Sort all elements of arr and dep combined. If it belongs to arrived, increase counter. if departs, decrease counter. Max value of count is the max platforms needed.

Merge intervals - sort based on start times. Combine prev one with curr one if prev_end is more than curr_start.
class Solution {
    public int[][] merge(int[][] intervals) {
        int n = intervals.length;
        if(n==0 || n==1) return intervals;
        List<int[]> ans = new ArrayList<>();
        Comparator<int[]> comp = (a,b)->(a[0]-b[0]);
        Arrays.sort(intervals, comp);
        int prevStart = intervals[0][0];
        int prevEnd = intervals[0][1];
        for(int i=1; i<n; i++){
            int currStart = intervals[i][0];
            int currEnd = intervals[i][1];
            if(prevEnd >= currStart){
                currEnd = Math.max(currEnd, prevEnd);
            }else{
                ans.add(new int[]{prevStart, prevEnd});
                prevStart = currStart;
            }
            prevEnd = currEnd;
        }
        ans.add(new int[]{prevStart, prevEnd}); //Add last element.

        int[][] ansArr = new int[ans.size()][2];
        for(int i=0; i<ans.size(); i++){
            ansArr[i] = ans.get(i);
        }
        return ansArr;
    }
}
