DP - 
All DP problems are reccursion problems where we have overlapping sub-problems.
When to go from 0 to n-
when to go from n to 0-

Steps in any DP problem -
1.Get the recursive solution.
2.Change the recursive solution to memoization.
3.Create tabulation
4.Space optimisation of tabulation technique.

Hints -
1.No.of ways (all possibilities)
2.Min or max with some conditions

#################################################################################################################
1D DP - one index
1.Climbing Stairs - Person can take either 1 or 2 steps.
recursion - f(n) = f(n-1)+ f(n-2); //Number of ways person can reach n-1th step + Number of ways person can reach n-2th step.
base case - n<0 -> return 0, n==0 || n==1 return 1.
tabulation - dp[n] = dp[n-1]+ dp[n-2].
space optimisation - curr = prev_1 + prev_2; prev_2 = prev_1, prev_1 = curr.

2.From jump
a)
b)

3.House robber /Max. sum of non-adjacent elements.
a)
b)
#################################################################################################################
2D DP- two indexes
Type 1: Both index i & j are fixed.
Type 2: Only one of indexes i or j is fixed, other is variable.
Type 3: Both index i and j are variable.

1.Given an array on non-negative integers. Find if there exists a sub-sequence where its sum is same as target.
*Boolean problem. Return only true/ false.
f(ind, target){
  if(target == 0) return true;
  if(target < 0) return false;
  if(ind == n) return false;
  if(f(ind +1, target-arr[ind])) return true; //taking the element and reducing the target.
  if(f(ind +1, target)) return true; //not taking the element.
  return false;
}
#################################################################################################################
3D DP- 3 indexes


#################################################################################################################
Longest Common Subsequence -
#################################################################################################################
Longest Increasing Subsequence - (strictly increasing)
recursion - we need prev_index to say if we can take next element or not.
f(ind, prev_ind){
  if(ind == n) return 0;
  if(prev_ind == -1 || arr[ind] > arr[prev_ind]) len = 1+ f(ind+1, ind);
  len = Math.max(len, f(ind+1, prev_ind);
  return len;
}
f(0, -1)

O(N*N) solution -

#################################################################################################################
Partition DP -
