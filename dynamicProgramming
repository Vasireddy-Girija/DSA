DP - 
All DP problems are reccursion problems where we have overlapping sub-problems.
When to go from n to 0- When you want to convert it to tabulation, this is preferrable. We tabulate by going from 0 to n.
When to go from 0 to n- 
1.When you want the subsequences, since we had to maintain order, go from 0 to n.
2.When this is logical - ex: In longest increasing subsequence, we will have to go from 0 to n as prev element is imp to us.
3.In this case, in tabulation, take the loop from n to 0.

Steps in any DP problem -
1.Get the recursive solution.
2.Change the recursive solution to memoization.
3.Create tabulation
4.Space optimisation of tabulation technique.

Hints -
1.No.of ways (all possibilities)
2.Min or max with some conditions
3.Is there any way which satisfies the condition (true/false)
#################################################################################################################
1D DP - one index
1.Climbing Stairs - Person can take either 1 or 2 steps.
recursion - f(n) = f(n-1)+ f(n-2); //Number of ways person can reach n-1th step + Number of ways person can reach n-2th step.
base case - n<0 -> return 0, n==0 || n==1 return 1.
tabulation - dp[n] = dp[n-1]+ dp[n-2].
space optimisation - curr = prev_1 + prev_2; prev_2 = prev_1, prev_1 = curr.

2.From jump
a)
b)

3.House robber /Max. sum of non-adjacent elements.
a)
b)
#################################################################################################################
2D DP- two indexes
Type 1: Both index i & j are fixed.
Type 2: Only one of indexes i or j is fixed, other is variable.
Type 3: Both index i and j are variable.

1.Given an array on non-negative integers. Find if there exists a sub-sequence where its sum is same as target.
*Boolean problem. Return only true/ false.
class Solution {
    static boolean recFunc(int[] arr, int idx, int target){
        if(target == 0) return true;
        if(idx == arr.length) return false;
        boolean ans = false;
        if(target>=arr[idx]) ans = recFunc(arr, idx+1, target-arr[idx]);
        ans = ans || recFunc(arr, idx+1, target);
        return ans;
    }

    static Boolean isSubsetSum(int arr[], int target) {
        return recFunc(arr, 0, target);
    }
}

static Boolean isSubsetSum(int arr[], int target) {
    int n = arr.length;
    boolean[][] dp = new boolean[n][target+1];
    
    for(int i=0; i<n; i++) dp[i][0] = true;
    if(arr[0]<=target) dp[0][arr[0]] = true;
    
    for(int i=1; i<n; i++){
        for(int j=1; j<=target; j++){
            if(j>=arr[i]) dp[i][j] = dp[i-1][j-arr[i]];
            dp[i][j] = dp[i][j] || dp[i-1][j];
        }
    }
    return dp[n-1][target];
}

**considering empty arr.
static Boolean isSubsetSum(int arr[], int target) {
    int n = arr.length;
    boolean[][] dp = new boolean[n+1][target+1];
    
    for(int i=0; i<=n; i++) dp[i][0] = true;
    
    for(int i=1; i<=n; i++){
        for(int j=1; j<=target; j++){
            if(j>=arr[i-1]) dp[i][j] = dp[i-1][j-arr[i-1]];
            dp[i][j] = dp[i][j] || dp[i-1][j];
        }
    }
    return dp[n][target];
}

Count num of ways in which we can get target - num of ways by taking the element and number of ways without taking the element.
class Solution{
	public int perfectSum(int arr[],int n, int sum) 
	{ 
	    int mod = (int)1e9+7;
	    int[][] dp = new int[n+1][sum+1];
	    for(int i=0; i<=n;i++) dp[i][0] = 1;
	    for(int i=1; i<=n ; i++){
	        for(int j=1;j<=sum; j++){
	            if(j>=arr[i-1]) dp[i][j] = dp[i-1][j-arr[i-1]];
	            dp[i][j] = (dp[i][j] + dp[i-1][j])%mod;
	        }
	    }
	    return dp[n][sum];
	} 
}

Count num of ways if we can take an element any num of times - 
f(i,j) = f(i+1,j)+f(i,j-arr[i])
dp[i][j] = dp[i-1][j]+dp[i][j-arr[i-1]] if dp[n+1]
dp[i][j] = dp[i-1][j]+dp[i][j-arr[i]] if dp[n]
class Solution {
    public int change(int amount, int[] coins) {
        int n = coins.length;
        int[][] dp = new int[n+1][amount+1];
        for(int i=0; i<=n; i++){
            dp[i][0] = 1;
        }
        for(int i=1; i<=n; i++){
            for(int j=1; j<=amount; j++){
                dp[i][j] = dp[i-1][j];
                if(j>=coins[i-1]) dp[i][j] += dp[i][j-coins[i-1]];
            }
        }
        return dp[n][amount];
    }
}

Min. number of coins required to get a given sum - Initialise with Integer.MAX_VALUE
class Solution {
    public int coinChange(int[] coins, int amount) {
        if(amount == 0) return 0;
        int n = coins.length;
        int[][] dp = new int[n+1][amount+1];
        for(int i=0; i<=n; i++){
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        for(int i=0; i<=n; i++) dp[i][0] = 0; //by not taking any element.
        for(int i=1; i<=n; i++){
            for(int j=1; j<=amount; j++){
                dp[i][j] = dp[i-1][j];
                if(j>=coins[i-1] && dp[i][j-coins[i-1]] != Integer.MAX_VALUE) dp[i][j] = Math.min(1+dp[i][j-coins[i-1]], dp[i][j]);
            }
        }
        return dp[n][amount]==Integer.MAX_VALUE?-1:dp[n][amount];
    }
}
Another approach - 
class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for(int i=0; i<=amount; i++){
            for(int j=0; j<coins.length; j++){
                if(i>=coins[j] && dp[i-coins[j]]!=Integer.MAX_VALUE) dp[i] = Math.min(dp[i], 1+dp[i-coins[j]]);
            }
        }
        return dp[amount]==Integer.MAX_VALUE?-1:dp[amount];
    }
}

knapsack problem - Here, we have to maximize profit and robber can pick the weight any number of times.
class Solution {
    static int knapSack(int val[], int wt[], int capacity) {
        int n = wt.length;
        int[][] dp = new int[n+1][capacity+1];
        for(int i=1; i<=n; i++){
            for(int j=1; j<=capacity; j++){
                dp[i][j] = dp[i-1][j];
                if(j>=wt[i-1]) dp[i][j] = Math.max(val[i-1]+dp[i][j-wt[i-1]], dp[i-1][j]);
            }
        }
        return dp[n][capacity];
    }
}
***In coin change, we have to initialise with Integer.MAX_VALUE and in knapsack, 
we don't have to do it as our constraint is <= capacity(<=j) and not == capacity(==j).

Rod cutting problem -
Given a rod of length n(size of price) inches and an array of prices, price. 
price[i] denotes the value of a piece of length i. 
Determine the maximum value obtainable by cutting up the rod and selling the pieces
class Solution {
    public int cutRod(int[] price) {
        int n = price.length;
        int[] dp = new int[n+1];
        for(int i=1; i<=n; i++){
            for(int j=1; j<=i; j++){
                dp[i] = Math.max(dp[i], price[j-1]+dp[i-j]);
            }
        }
        return dp[n];
    }
}
#################################################################################################################
3D DP- 3 indexes


#################################################################################################################
Longest Common Subsequence -
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();
        int[][] dp = new int[m][n];
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                int ans = 0;
                if(text1.charAt(i) == text2.charAt(j)){
                    ans = 1;
                    if(i>=1 && j>=1) ans += dp[i-1][j-1];
                }else{
                    if(i>=1) ans = Math.max(ans, dp[i-1][j]);
                    if(j>=1) ans = Math.max(ans, dp[i][j-1]);
                }
                dp[i][j] = ans;
            }
        }
        return dp[m-1][n-1];
    }
}

For Space optimisation, convert dp[i] to curr array and dp[i-1] to prev array.
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();
        int[] prev = new int[n];
        for(int i=0; i<m; i++){
            int[] curr = new int[n];
            for(int j=0; j<n; j++){
                int ans = 0;
                if(text1.charAt(i) == text2.charAt(j)){
                    ans = 1;
                    if(i>=1 && j>=1) ans += prev[j-1];
                }else{
                    if(i>=1) ans = Math.max(ans, prev[j]);
                    if(j>=1) ans = Math.max(ans, curr[j-1]);
                }
                curr[j] = ans;
            }
            prev = curr;
        }
        return prev[n-1];
    }
}
#################################################################################################################
Longest Increasing Subsequence - (strictly increasing)
recursion - we need prev_index to say if we can take next element or not.
f(ind, prev_ind){
  if(ind == n) return 0;
  if(prev_ind == -1 || arr[ind] > arr[prev_ind]) len = 1+ f(ind+1, ind);
  len = Math.max(len, f(ind+1, prev_ind);
  return len;
}
f(0, -1)

O(N*N) solution -
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        if(n==0 || n==1) return n; 
        int[] dp = new int[n];
        int maxVal = 1;
        Arrays.fill(dp, 1);
        for(int i=1; i<n; i++){
            for(int j=0; j<i; j++){
                if(nums[i]>nums[j]){
                    dp[i] = Math.max(dp[i], 1+dp[j]);
                }
            }
            maxVal = Math.max(maxVal, dp[i]);
        }
        return maxVal;
    }
}

print LIS - Take an array idx and initialise with corresponding index. Stop when idx[i]==i.
class Solution {
    public ArrayList<Integer> longestIncreasingSubsequence(int n, int arr[]) {
        int[] dp = new int[n];
        int[] idx = new int[n];
        int maxValIdx = 0;
        int maxVal = 1;
        Arrays.fill(dp, 1);
        for(int i=0; i<n; i++) idx[i]=i;
        for(int i=1; i<n; i++){
            for(int j=0; j<i; j++){
                if(arr[i]>arr[j] && dp[i]<=dp[j]){
                    dp[i] = dp[j]+1;
                    idx[i] = j;
                }
            }
            if(dp[i]>maxVal){
                maxVal = dp[i];
                maxValIdx = i;
            }
        }
        ArrayList<Integer> ans = new ArrayList<>();
        ans.add(arr[maxValIdx]);
        while(idx[maxValIdx] != maxValIdx){
            maxValIdx = idx[maxValIdx];
            ans.add(arr[maxValIdx]);
        }
        Collections.reverse(ans);
        return ans;
    }
}

LIS using binary search - O(nlogn) - Used only to find length and not sub-sequence.

Largest Divisble Subset -
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:
answer[i] % answer[j] == 0, or answer[j] % answer[i] == 0
Sort the arr and perform LIS with logic arr[i]%arr[j]==0 && dp[i]<=dp[j], then dp[i]=dp[j]+1;

Longest String Chain - O(n3)
Input: words = ["a","b","ba","bca","bda","bdca"]
Output: 4
Explanation: One of the longest word chains is ["a","ba","bda","bdca"].
In the word chain, only one word should be added to its adjacent at any place.
Comparator<String> comp = (a, b)->a.length()-b.length();
Arrays.sort(words, comp); // String[] words

public boolean isPredecessor(String word1, String word2){
    if(word2.length()-word1.length() != 1) return false;
    int i=0; int j=0; int cnt=0;
    while(i < word1.length()){
        if(word1.charAt(i) != word2.charAt(j)){
            cnt += 1;
            if(cnt > 1) return false;
            j += 1;
            continue;
        }
        i += 1;
        j += 1;
    }
    return true;
}

for(int i=1; i<n; i++){
    for(int j=0; j<i; j++){
        if(isPredecessor(words[j], words[i])){
            dp[i] = Math.max(dp[i], dp[j]+1);
        }
    }
    maxVal = Math.max(maxVal, dp[i]);
}

Longest Bitonic Sequence - len of increasing sequence + len of decreasing sequence
If the arr is strictly inc or dec, then return 0.
int maxVal = 0;
for(int i=0; i<n; i++){
    if(dp1[i] == 1 || dp2[i] == 1) continue; //If it is 1, then we don't have any inc or dec seq after that. So excluding it.
    maxVal = Math.max(maxVal, dp1[i]+dp2[i]-1);
}
return maxVal;

Number of longest increasing subsequences - O(n2)

#################################################################################################################
Buy & Sell Stocks - Buy only once and sell only once. TC-O(n), SC-O(1)
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int maxProfit = 0;
        int currMax = prices[n-1];
        for(int i=n-2; i>=0; i--){
            currMax = Math.max(prices[i], currMax);
            maxProfit = Math.max(maxProfit, currMax-prices[i]);
        }
        return maxProfit;
    }
}


#################################################################################################################
Partition DP -
