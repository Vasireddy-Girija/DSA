Four types of problems -
1.SubArrays with constant length
2.Find maxLength of subArray which follows a specific condition.
3.Find number of subArrays which follows a specific condition.
  (i)Type-1 : Find number of sub-arrays with sum<=k
  (ii)Type-2: Find number of sub-arrays with sum=k 
      In Type-2 problems, we can't decide whether to move l or r. If we move l or r randomly, we ignore considering some sub-arrays.
      We solve it by using type-1 : count(sum<=k) - count(sum<=k-1)
4.Find minLength of subArray

For all the problems, take 2 pointers - l=0, r=0. SubArray includes l and r.
Use while loop. For each loop, do the operation on element r, based on condition, check when to move l. Increment r in every loop.
Length of array between 2 poins l & r = r-l+1;

Type-1: Find max sum of subArray of length k. //Both l and r should be incremented in each loop.
for(int i=0; i<k; i++) sum += arr[i];
maxSum = sum;
while(r < n-1){
  sum -= arr[l];
  l+=1;
  r+=1;
  sum += arr[r];
  maxSum = Math.max(sum, maxSum);
}

Type-2: Find maxLength of subArray whose sum <= k
a)Brute force - O(N*N) // subArray from i to j
for(int i=0; i<n; i++){
  int sum = 0;
  for(int j=i; j<n; j++){
    sum += arr[j];
    if(sum <= k) maxLen = Math.max(maxLen, j-i+1);
    else break;
  }
}

b)Time Complexity - O(N + N) //one N from inner while loop. //Use this if we want subArrays and not only maxLen.
int l=0; int r=0;
while(r < n){
  sum += arr[r]; //Do the operation on r.
  while(sum >k){
    sum -= arr[l];
    l += 1; //Check when to move l
  }
  maxLen = Math.max(maxLen, r-l+1);
  r += 1; //Move r always each time.
}

c)Time Complexity - O(N) //This would be enough if we just want maxLen and not subArrays.
int l=0; int r=0;
while(r<n){
  sum += arr[r];
  if(sum > k){ //Moving l only once as it doesn't impact our ans - maxLen as l and r are moved by 1  keeping r-l+1 constant.
    sum -= arr[l];
    l += 1;
  }
  maxLen = Math.max(maxLen, r-l+1);
  r += 1;
}

Type-3:
Case-1: Find count of sub-arrays with sum<=k
if(k<0) return 0; *As array contains non-negative integers.
int l=0; int r=0;
while(r < n){
  sum += arr[r];
  while(sum > k){
    sum -= arr[l];
    l +=1;
  }
  count += (r-l+1) //No.of subArrays that can be made with last element as r till l, with sum <= k
}
return count;

Case-2: Find count of sub-arrays with sum=k #Here, it is difficult to decide whether to move left or right
Example - [2, 3, 0, 0, 1, ]
Solution - Use case-1 to get count of sum <= k and sum <= k-1. Subtract both.

Problems -
#######################################################################################################
Type-1
Maximum point you can obtain from cards
#######################################################################################################
Type -2
1.Longest Substring Without Repeating Characters - Given a string s, find the length of the longest 
substring without repeating characters.
Hint - maxLen and subArray with a condition. -> Use 2 pointer-sliding window.
Sol - Maintain a map with recent index for each char. If we see get a char that is already in map and left pointer is less than the index in map, 
      move left to index in map+1 and continue.
class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> map = new HashMap<>();
        int n = s.length();
        int l = 0;
        int r = 0;
        int maxLen = 0;
        while(r < n){
            if(map.containsKey(s.charAt(r))){
                if(!(l> map.get(s.charAt(r)))) l = map.get(s.charAt(r))+1; //try for string "abba" why we have this check.
            }
            map.put(s.charAt(r), r);
            maxLen = Math.max(maxLen, r-l+1);
            r += 1;
        }
        return maxLen;
    }
}

2.Max Consecutive Ones III - Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.
Hint : maxLen, consecutive - subArray -> Use 2 pointer - sliding window.
Sol - if arr[i] ==0, count += 1, if(count >k) -> check if arr[l] is 1 and decrease it, move l+= 1. For each loop, increase r.
class Solution {
    public int longestOnes(int[] nums, int k) {
        int n = nums.length;
        int l=0;
        int r=0;
        int count = 0;
        int maxCount = 0;
        while(r < n){
            if(nums[r]==0) count += 1;
            if(count > k){
                if(nums[l] == 0) count -=1;
                l += 1;
            }else{
                maxCount = Math.max(r-l+1, maxCount);
            }
            r += 1;
        }
        return maxCount;
    }
}

3.Fruit into baskets - Consecutive fruits such that there should not be no more than 2 types of distinct fruits in the consecutive segment. 
Find the len of the consecutive segment.
Hint : maxLen, consecutive -> subArray, condition - map.size()<=2 always.
Sol : Take a map with fruit num as key and it's count as value. Decrease count as we move l, increase count as we move r. 
While moving l, if count necomes 0 for any fruit, remove it's entry from map.

4.Longest Substring with At Most K Distinct Characters - Same as above
Condition - map.size() <= k

5.Longest repeating character replacement - 
If we use Capital alphabet or only small alphabet, instead of using map, we can use hashArr.
Brute force -
class Solution {
    public int characterReplacement(String s, int k) {
        int maxLen = 0;
        for(int i=0; i<s.length(); i++){
            int[] hashArr = new int[26];
            int maxFreq = 0;
            for(int j=i; j<s.length(); j++){
                hashArr[s.charAt(j)-'A']+=1;
                maxFreq = Math.max(maxFreq, hashArr[s.charAt(j)-'A']);
                if(j-i+1-maxFreq<=k) maxLen = Math.max(maxLen, j-i+1);
                else break;
            }
        }
        return maxLen;
    }
}

Optimised - TC - O(26*2N)
class Solution {
    public int characterReplacement(String s, int k) {
        int l= 0;
        int r= 0;
        int maxLen = 0;
        int maxFreq = 0;
        int[] hashArr = new int[26];
        while(r < s.length()){
            hashArr[s.charAt(r)-'A']+=1;
            maxFreq = Math.max(maxFreq, hashArr[s.charAt(r)-'A']);
            while(r-l+1-maxFreq>k){
                hashArr[s.charAt(l)-'A']-=1;
                l +=1;
                for(int i=0; i<26; i++){
                    maxFreq = Math.max(maxFreq, hashArr[i]);
                }
            }
            maxLen = Math.max(maxLen, r-l+1);
            r += 1;
        }
        return maxLen;
    }
}

#######################################################################################################
Type -3
1.Binary subarray with sum - Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal. 
A subarray is a contiguous part of the array.
Brute force - 
class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        int count = 0;
        for(int i=0; i<nums.length; i++){
            int sum = 0;
            for(int j=i; j<nums.length; j++){
                sum += nums[j];
                if(sum==goal){
                    count += 1;
                }
                if(sum > goal) break;
            }
        }
        return count;
    }
}
Example -  nums = [0,1,0,1,0,1], goal = 2 When l=0 and r=5, we will generally move l to idx 2. We will miss sub-array with idx (1 to 4) sub-array.
If sub-array has zeros, then calculate count <= goal and count <= goal-1 and subtract both.
For each r, we will add num of sub-arrays we get for that r, which will be r-l+1 i.e length of the sub-array.
class Solution {
    public int subArrayCount(int[] nums, int goal){
        if(goal < 0) return 0;
        int l=0;
        int r=0;
        int count=0;
        int sum = 0;
        while(r<nums.length){
            sum += nums[r];
            while(sum>goal){
                sum -= nums[l];
                l += 1;
            }
            count += r-l+1;
            r += 1;
        }
        return count;
    }
    public int numSubarraysWithSum(int[] nums, int goal) {
        return subArrayCount(nums, goal) - subArrayCount(nums, goal-1);
    }
}

Same approach for -
Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it. Return the number of nice sub-arrays.
If there are elements that doesn't change the state, then use this approach.

2.Number of Substrings Containing All Three Characters - Given a string s consisting only of characters a, b and c.
Return the number of substrings containing at least one occurrence of all these characters a, b and c.
Example - s = "abcabc" When l is at 0 and r is at 2, we don't know whether to move r or l to right and both cases are possible. If we choose one, the other subArray will be lost.
Hint - subArray, count, confusion whether to move l or r => Type -3 problem.
Sol : All sub arrays - count of sub arrays where distinct elements are <= 2.

**If we want to take decision based on map sie, but we don't want to remove element from map to reduce TC, then carry a map_nonzero_size.
class Solution {
    public int getCountOfKChar(String s, int k){
        if(k<0) return 0;
        Map<Character, Integer> freqCount = new HashMap<>();
        int l=0;
        int r=0;
        int n=s.length();
        int count = 0;
        int map_nonzero_size = 0;
        Map<Character, Integer> map = new HashMap<>();
        while(r<n){
            if(map.containsKey(s.charAt(r)) && map.get(s.charAt(r)) != 0){
                map.put(s.charAt(r), map.get(s.charAt(r))+1);
            }else{
                map.put(s.charAt(r), 1);
                map_nonzero_size += 1;
            }
            while(map_nonzero_size > k){
                map.put(s.charAt(l), map.get(s.charAt(l))-1);
                if(map.get(s.charAt(l))==0) map_nonzero_size -= 1;
                l += 1;
            }
            count += r-l+1;
            r += 1;
        }
        return count;
    }
    public int numberOfSubstrings(String s) {
        return getCountOfKChar(s, 3)-getCountOfKChar(s,2);
    }
}

3.Sub arrays with k different characters.
class Solution {
    public int subArrayCount(int[] nums, int k){
        if(k==0) return 0;
        int n=nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        int count = 0;
        int l=0;
        int r=0;
        while(r<n){
            map.put(nums[r], map.getOrDefault(nums[r], 0)+1);
            while(map.size() > k){
                map.put(nums[l], map.get(nums[l])-1);
                if(map.get(nums[l])==0) map.remove(nums[l]);
                l += 1;
            }
            count += r-l+1;
            r += 1;
        }
        return count;
    }
    public int subarraysWithKDistinct(int[] nums, int k) {
        return subArrayCount(nums, k) - subArrayCount(nums, k-1);
    }
}

#############################
Maximum Points You Can Obtain from Cards - You can remove carrds either from first or from right. You can take k cards.
Find the max sum you get by taking k cards.
Failed approach - 2 points, one at l=0 and other at r=n-1. If arr[r]>arr[l] take r and r-=1; else take l and l+= 1;
Doesn't give max as we can have l so less but l+1 so high. In this case,we keep taking from back. Greedy doesn't work.
Example - [1, 10000, 2, 3, 4, 5],we can take 2 cards. Above approach gives 9 instead of 10001.

Solution -
Compute totalSum;
Compute sum of first n-k elements;
for k times, sum - arr[i] + arr[n-k+i] for i->[0,k). Get min in all these.
Ans will be totSum-min.
