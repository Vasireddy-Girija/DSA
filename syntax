primitive data types(8) - byte, short, int, float, double, long, char, boolean

Arrays - can be created for primitive & non-primitive data types.
int[] arr = new int[n]; where n is the total number of integers in the array.
Integer[] arr = new Integer[n];
Length of arr - arr.length;
Initialise all elements of arr with default value - Arrays.fill(arr, -1); here -1 is default value.
For initialising 2D array, int dp[m][n], Use Arrays.fill for each row.
for(int i=0; i<m; i++) Arrays.fill(dp[i], -1);
int [][] twoDArray = { { 1, 2, 3 }, { 4, 5, 6 } };
int[] arr = new int[]{0, 0}
ArrayList<String> places = new ArrayList<>(Arrays.asList("Buenos Aires", "CÃ³rdoba", "La Plata"));

List - List is an interface. Cannot create lists with primitives as it is not supported for Generics.
ArrayList is implementation of List interface.
List<Integer> lst = new ArrayList<>();
Size of array list - lst.size();

Array of lists - List<Integer>[] arrOfLists = new ArrayList[n]; //NOT new ArrayList<>[n];
List of Arrays - List<Integer[]> listOfArr = new ArrayList<Integer[]>();

Convert List<Integer> to int[] - int[] arr = lst.stream().mapToInt(i -> i).toArray();
Convert Object array to Object list - List<Integer> lst = new ArrayList<>(Arrays.asList(arr)); //Integer[] arr
Convert primitive array to Object list - int[] arr
List<Integer> list = Arrays.stream(arr).boxed().collect(Collectors.toList());

Sort methods sort the elements inplace.
Collections.sort(Object List), Collections.sort(ObjList, Collections.reverseOrder());
Arrays.sort(primitive array/Object array)
For Object array, Arrays.sort(objArr, Collections.reverseOrder());
For primitive array, Arrays.sort(primArr, Collections.reverseOrder()) will NOT work.

Map -
Map<Integer, String> map = new HashMap<>();
map.size();
map.containsKey(key); map.containsValue(key);
map.putIfAbsent(key, value); //If key is already present, then it will not do anything.
map.put(key, value);
map.get(key); // Always check if key is present in map and then use map.get(key);
map.getOrDefault(key, defaultValue); //if key is present, it gives value of key, otherwise it gives default value.
map.keySet(); map.values(); map.entrySet(); isEmpty()
Types - HashMap, LinkedHashMap, TreeMap
HashMap - no order - get, put , remove, containsKey() - O(1)
LinkedHashMap - maintains insertion order - get, put , remove, containsKey() - O(1)
TreeMap - maintains sorted order or order given by comparator. - put, get, contains, remove - O(logn)
firstKey(), lastKey() gives smallest/ largest values based on comparator.
Sometimes we can use TreeMap instead of priorityQueue in java as we cannot remove element in O(logn) in priorityQueue.
TreeMap uses red-black tree which is a self-balancing binary search tree.

Set - HashSet, LinkedHashSet, TreeSet
Set  stores unique elements
HashSet - stores elements in a hashTable. Doesn't maintain any order. Allows insertion of null element.
TC for add, remove, contains, size - O(1) assuming no collisons.
LinkedHashSet - stores elements in doubly linked list, that maintains insertion order.This class etends HashSet. Allows one null element.
TC for add, remove, contains, size - O(1)
TreeSet - stores elemnt in red-black tree. Elemnts will be sorted or ordered by comparator given at set creation.
Set set = ne TreeSet<>(comparator);
TC for add, remove, contains - O(logn). 
Doesn't allow null elements as elements needs to be compared for sorting.
Union between 2 sets a,b - a.addAll(b)
Intersection between 2 sets a,b - a.retainAll(b)
Difference between 2 sets a,b - a.removeAll(b)


Queue - First In Last Out data structure (FIFO)
Queue q = new LinkedList<>();
q.isEmpty()
q.size()
q.add() //Adds at the back of queue.
q.poll() - returns front element and removes it.
q.peek() -  returns front element.

Stack - Last In First Out (LIFO)
Stack<Integer> stk = new Stack<>();
stk.pop();
stk.push();
stk.size();
stk.isEmpty();
s.peek();
min stack - store int[2] with element and min till now in the stack.

Deque - If we want to have stack and queue in one data structure. It is a queue interface.
Deque<Integer> deq = new ArrayDeque<>(); or ne LinkedList<>();
deq.addFirst();
deq.addLast();
deq.pollFirst();
deq.pollLast();
deq.getFirst();
deq.getLast();

Pair -
import javafx.util.Pair;
Pair<Integer, Integer> pair = new Pair(1, 2);
pair.getKey();
pair.getValue();

Convert char array to String - 
char[] chArray = new char[n];
String str = new String(chArray);
String str = String.valueOf(chArray);
Convert List of Character to String -
Convert String to char array -
char[] chArray = str.toCharArray();
Character at index i of a string - str.charAt(i)
Character - 'c', String - "c"
str.substring(0,n) - str.subString(startIdx, endIdx+1)
String[] str1 = str.split(",");
str2 = str.trim(); - remove leading and tailing empty spaces. Empy spaces in between the string will not be removed.
Character.isLetterOrDigit(ch)
Character.toLowerCase(ch)
String str.toLowerCase();


int a = 1;
char ch = (char)(a+'0');
String str = Integer.toString(a);

char ch = 'a';
int a = 'a'-'0'

StringBuilder - mutable, not thread safe
reverse a string - new StringBuilder(str).reverse().toString();
StringBuilder str = new StringBuilder();
str.append(s) //where s is also string or character
str.delete(startIdx, endIdx+1) to remove all cahrs from startIdx to endIdx
str.length() - for length of stringBuilder.
remove last char - str.delete(str.length()-1, str.length())
str.charAt(i) -> same for string and stringBuilder

Iterator -


Comparator -
Arrays.sort(arr, Colections.reverseOrder());
Arrays.sort(arr, comp);
Collections,sort(lst, comp);
new PriorityQueue<>(comp);
Comparator<Integer> comp = (a,b)->(a-b); sorts list of integers in ascending order.
Comparator<int[]> compOfIntArr = (a,b)->(b[1]-a[1]); sorts int[] in descending order of 2nd element of int[]
Arrays.sort(int[][], compOfIntArr); In compOfIntArr, each element should be int[].
How to sort based on multiple criteria - ?
