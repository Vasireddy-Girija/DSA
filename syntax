primitive data types(8) - byte, short, int, float, double, long, char, boolean

Arrays - can be created for primitive & non-primitive data types.
int[] arr = new arr[n]; where n is thetotal number of integers in the array.
Integer[] arr = new Integer[n];
Length of arr - arr.length;
Initialise all elements of arr with default value - Arrays.fill(arr, -1); here -1 is default value.

List - List is an interface. Cannot create lists with primitives as it is not supported for Generics.
ArrayList is implementation of List interface.
List<Integer> lst = new ArrayList<>();
Size of array list - lst.size();

Map -
Map<Integer, String> map = new HashMap<>();
map.size();
map.containsKey(key);
map.putIfAbsent(key, value); //If key is already present, then it will not do anything.
map.put(key, value);
map.get(key); // Always check if key is present in map and then use map.get(key);
map.getOrDefault(key, defaultValue); //if key is present, it gives value of key, otherwise it gives default value.

Queue - First In Last Out data structure (FIFO)
Queue q = new LinkedList<>();
q.isEmpty()
q.size()
q.add() //Adds at the back of queue.
q.poll() - returns front element.

Stack - Last In First Out (LIFO)
Stack<Integer> stk = new Stack<>();
stk.pop();
stk.push();
stk.size();
stk.isEmpty();

Deque - If we want to have stack and queue in one data structure. It is a queue interface.
Deque<Integer> deq = new ArrayDeque<>(); or ne LinkedList<>();
deq.addFirst();
deq.addLast();
deq.pollFirst();
deq.pollLast();
deq.getFirst();
deq.getLast();

Pair -
import javafx.util.Pair;
Pair<Integer, Integer> pair = new Pair(1, 2);
pair.getKey();
pair.getValue();

Convert char array to String - 
char[] chArray = new char[n];
String str = new String(chArray);
String str = String.valueOf(chArray);
Convert List of Character to String -
Convert String to char array -
char[] chArray = str.toCharArray();
