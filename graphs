Number of edges of un-directed graph with n nodes - n*(n-1)/2
how many undirected graphs (not necessarily connected) can be constructed out of a given n number of vertices - Math.pow(2, n*(n-1)/2)
All combination of edges(select 2 edges out of k edges so on), which is 2 power k, where k=n*(n-1)/2

in-degree - number of edges coming to that node.
Total number of in-degree for un-directed graph - 2*E
Total number of in-degree for directed graph - E
A graph can have multiple connected components.

Store graphs -
adjacency matrix - int[V][V]
adjacency list - List<List<Integer>>

***IMP
For Directed graphs, adjList.get(u).add(v);
For Un-directed graphs, adjList.get(u).add(v); adjList.get(v).add(u);
****If vertices are not numbers, use map as adjList where key is the vertex and visited set instead of visited array.

Components - Graphs that are not connected. Always do the traversals for all components.
Ex:
for(int i=0; i<v; i++){
     if(!visited[i]){
        bfs(node, adj, visisted); //marks visited array for all nodes of a conected graph if called once.
     }
}

***Check if u need visited or distance array. While adding to queue, 
check if we repeat adding it. Generally if we have distance array, we don't need visited array as we will check condition on distance aray before adding to queue/ priority queue.
For finding shortest paths, if we use queue(for unit weights), if we store distance as part of queue entry, we should use visited as we will not maintain distance array.
***IMP - For Dijkstra, put dst as dst from src in priorityQueue and not wt.

Traversal- We need visited arrays for both directed(as we might have cycles) & un-directed traversals.
BFS - O(V+2E) for un-directed and O(V+E) for directed graphs.
public void bfs(int node, List<List<Integer>> adj, boolean[] visited){
        Queue<Integer> q = new LinkedList<>();
        q.add(node);
        visited[node] = true;
        while(!q.isEmpty()){
            int front = q.poll();
            for(int element : adj.get(front)){
                if(!visited[element]){
                    visited[element] = true;
                    q.add(element);
                }
            }
        }
    }

DFS - O(V+2E) for un-directed and O(V+E) for directed graphs.
public void dfs(int node, List<List<Integer>> adj, boolean[] visited){
        visited[node] = true;
        for(int element : adj.get(node)){
            if(!visited[element]){
                dfs(element, adj, visited);
            }
        }
    }

########################################################################################################################
Cycle detection - works for self-loops as well.
1.Undirected graph (same parent)-
BFS - In queue, store (node, parent) //If it is already visited, then it should be from its parent.
public boolean detectCycle(int node, ArrayList<ArrayList<Integer>> adj, boolean[] visited){
        Queue<List<Integer>> q = new LinkedList<>();
        q.add(new ArrayList<>(Arrays.asList(node, -1)));
        visited[node] = true;
        
        while(!q.isEmpty()){
            List<Integer> currPair = q.poll();
            int currNode = currPair.get(0);
            int currParent = currPair.get(1);
            
            for(int element: adj.get(currNode)){
                if(!visited[element]){
                    visited[element] = true;
                    q.add(new ArrayList<>(Arrays.asList(element, currNode)));
                }else{
                    if(element != currParent){
                        return true;
                    }
                }
            }
        }
        return false;
    }

DFS -
 public boolean dfs(int node, int parent, ArrayList<ArrayList<Integer>> adj, boolean[] visited){
        visited[node] = true;
        for(int element : adj.get(node)){
            if(!visited[element]){
                if(dfs(element, node, adj, visited)) return true;
            }else{
                if(element != parent) return true;
            }
        }
        return false;
    }

2.Directed graph (same path)-
DFS-
public boolean dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean[] visited, boolean[] path){
        visited[node] = true;
        path[node] = true;
        for(int element : adj.get(node)){
            if(!visited[element]){
                if(dfs(element, adj, visited, path)) return true;
            }else{
                if(path[element]) return true;
            }
        }
        path[node] = false;
        return false;
    }
BFS - can be done using topological sort Kahn's/indegree algorithm. DFS toposort type doesn't work.

########################################################################################################################
Topological sort - Possible only for directed acyclic graphs.
If there is an edge from a->b, then a should be done/ pre-requisite for b. So element with 0 indegree should be done first/ comes first in topoSort.
DFS - What if we do a topo sort for directed cyclic graph? We get wrong topo sort order.
We should check for all components using visted array to get topoSort of all components.
public void dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean[] visited, Stack<Integer> stk){
        visited[node] = true;
        for(int element : adj.get(node)){
            if(!visited[element]){
                dfs(element, adj, visited, stk);
            }
        }
        stk.push(node);
    }

BFS - Use in_degree array - if indegree is 0, then mark it visited and put in the queue.
*If len(topoSort) != V, then the graph has cycle.
*Multiple components not required as indegree will handle it and put in the queue in the beginning.
*Visited array is not not needed as elements are marked visited only when teir indegree is 0 and once their indegree becomes zero, 
we will not have any new u such that theur is an edge from u->v. So visited array is redundant.
*Number of visited should be equal to number if vertices for DAG. If they are not equal, then it is not DAG.
****This topoSort will not have elements which are part of cycle and nodes which have incoming edges from a cycle.
static int[] bfs_topoSort(int V, int[] indegree, ArrayList<ArrayList<Integer>> adj){
        Queue<Integer> q = new LinkedList<>();
        int visited = 0;
        for(int i=0; i<indegree.length; i++){
            if(indegree[i] == 0){
                q.add(i);
            }
        }
        int[] topSort = new int[V];
        while(!q.isEmpty()){
            int node = q.poll();
            topSort[j] = node;
            visited += 1;
            for(int element: adj.get(node)){
                    indegree[element] -= 1;
                    if(indegree[element] == 0){
                        q.add(element);
                    }
                }
            }
        }
        return topSort;
    }
########################################################################################################################
adjacency list for weighted graph - u -> ({v, wt}, {w, wt})
dst[src] = 0

For shortest paths, visited array is not needed. We will iterate till queue is empty.
Shortest path of Undirected graph with unit weights - Use a queue (put [node,dst] in queue with vis array) or (put [node] with dst array)
Shortest path of Undirected graph with non-negative weights - 
     Use a priority queue (put [dst from src node, node]), dst array.
     We can use queue. But it will take multiple iterations.
Shortest path of directed acyclic graph (DAG) - Find topo sort, and based on topo sort, update dst array.

Dijkstra (works for directed, undirected, positive cycle graphs- 
Doesn't work for a graph with -ve edges.
     Doesn't work for undirected -ve edges as it will give TLE.
     Does it work for directed -ve edges ?
It gives TLE(keeps on running) if Dijkstra has -ve cycles.
Time complexity of Dijkstra - ElogV 
Start Dijkstra with a priority queue to store [dst from src node, node] in ascending order. Start with (0, src) in priority queue
and iteratite till it becomes empty.

pq.add(new iPair(src, 0));
int[] dst = new int[n];
Arrays.fill(dst, Integer.MAX_VALUE);
dst[src] = 0;

relaxation of edges - edge form u -> v with weight wt
if(dist[u] != Integer.MAX_VALUE && dist[v] > dist[u]+wt]), then dist[v]=dist[u]+wt;

Bellman Ford algo - TC - O(V*E)
Applicable only for Directed graph. If we have undirected graph, convert to directed graph.
It helps to find -ve cycles.
Run a loop of V-1 times for all edges. If distance array changes Vth time also, then graph has a -ve cycle.
Why V-1 ? For a graph with V vertices, max edges between 2 vertices can be V-1. Also, max edges for shortest path can be V-1.
Edges in bellman ford can be of any order. If src vertex is 0 and edges corresponding to 0th vertex are in the last, we will need V-1 iterations.
Since edges can be in any order, relaxation of edges will be -
if(dist[u] != 1e9 and dist[v] > dist[u]+wt]), then dist[v]=dist[u]+wt; //not guaranteed that we visited u before visting v.
for(int i=0; i<V-1; i++){
     for(int[] edge: edges){
          ...
     }
}
static int[] bellman_ford(int V, ArrayList<ArrayList<Integer>> edges, int S) {
        // Write your code here
        int[] dist = new int[V];
        int maxVal = (int)1e8;
        Arrays.fill(dist, maxVal);
        dist[S] = 0;
        for(int i=0; i<V-1; i++){
            for(ArrayList<Integer> edge: edges){
               //check if dist[u] is maxVal before updating it, as it might get updated for -ve edges.
                if(dist[edge.get(0)] != maxVal && dist[edge.get(1)] > dist[edge.get(0)]+edge.get(2)){
                    dist[edge.get(1)] = dist[edge.get(0)]+edge.get(2);
                }
            }
        }
        boolean negativeCycle = false;
        for(ArrayList<Integer> edge: edges){
            if(dist[edge.get(0)] != maxVal && dist[edge.get(1)] > dist[edge.get(0)]+edge.get(2)){
                negativeCycle = true;
                break;
            }
        }
        if(negativeCycle){
            return new int[]{-1};
        }
        return dist;
    }

Floyd Warshall - TC - O(V*V*V)
Applicable only for Directed graph. If we have undirected graph, convert to directed graph.
It helps to find -ve cycles.
Dijkstra and Bellman ford - shortest path from single node src to every other node.
Floyd Warshall - shortest path from each node to every other node.
Create a wt matrix - (u, u) -> 0, (u, v) -> wt if it exists. (u, v) -> inf if u->v doesn't exist.
for(int via=0; via<V; via++){
     for(int i=0; i<n; i++){
          for(int j=0; j<V; j++){
               cost[i][j] = Math.min(cost[i][j], cost[i][via]+cost[via][j]);
          }
     }
}
How to detect negative cycles - After the loop, if any wt from u to u is -ve, then it has -ve cycle.
for(int i=0; i<V; i++){
     if(cost[i][i] <0){
          return true;
}

If we want to use Dijkstra for each node instead of floyd warshall, we need to ensure that graph doesn't have -ve cycle. 
Otherwise we get TLE. TC would be V*E*LogV (E can be max of V*V).

########################################################################################################################
Minimum spanning tree - MST (Undirected weighted graph) with N nodes and M edges.
Spanning Tree - A graph with N nodes and N-1 edges where all nodes are reachable from each other.
Spanning tree with least edge sum is called minimum spanning tree.

Prim's algorithm (Greedy)- TC - ElogE
We need a priority queue to store (wt, node, parent), visited array, MST to store edges like (u,v), sum.
Store parent in priority queue only if we want to create MST array. Otherwise parent is not needed in priority Queue.
Start with (0, 0, -1) in priority queue. 
IMP - Mark a node visited only when we remove it from priority queue. 
Add to MST when we remove it from priority queue and it is already not visited. If it is not visited, add it to MST. Don't add 
Put in priority queue only if node is not visited.

static int spanningTree(int V, int E, List<List<int[]>> adj) {
        List<List<Integer>> MST = new ArrayList<>();
        int minSpanningSum = 0;
        int[] visited = new int[V];

        PriorityQueue<List<Integer>> pq = new PriorityQueue<>((a,b)->(a.get(0)-b.get(0)));
        pq.add(new ArrayList<>(Arrays.asList(0,0,-1))); //(wt, node, parent for MST)

        while(!pq.isEmpty()){
            List<Integer> top = pq.poll();
            int wt = top.get(0);
            int u = top.get(1);
            int parent = top.get(2);
            if(visited[u] != 1){
                visited[u] = 1;
                if(parent != -1){
                    MST.add(new ArrayList<>(Arrays.asList(u, parent)));
                    minSpanningSum += wt;
                }
                for(int[] neigh : adj.get(u)){
                    int v = neigh[0];
                    int v_wt = neigh[1];
                    if(visited[v] != 1){
                        pq.add(new ArrayList<>(Arrays.asList(v_wt, v, u)));
                    }
                }
            }
        }
        return minSpanningSum;
    }
########################################################################################################################
Disjoint set - Online algo, where if we are given 2 nodes, we should say if they belong to same component in almost constant time.
TC to create disjoint set - O(V)
union(u, v) - mark an edge from u to v. (for undirected graphs)
If ultimate parent of u and v are same, then u & v belong to same component.
While getting ultimate parent, do path compression so that we can get ultimate parent in constant time, 
otherwise it will take logN time to get ultimate parent.

//Union without rank or size. Not efficient as we might not find parent in logN.
class GfG
{
	int find(int A[],int X)
        {
          if(A[X]==X) return X;
          return A[X] = find(A, A[X]);
	}
	void unionSet(int A[],int X,int Z)
        {
         int ulp_x = find(A, X);
         int ulp_z = find(A, Z);
         if(ulp_x == ulp_z) return;
         A[ulp_x] = ulp_z;
	}
}

We can create Disjoint set by - rank, size
rank - rank is more if size of the component is more.
size - total number of nodes in the component.

In the union by rank method, why do we need to connect the smaller rank to the larger rank?
shrinking the height of the graph and reducing the time complexity as much as we can so that we can find untimate prent in lesser time.

class DisjointSet {
    List<Integer> rank = new ArrayList<>();
    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();
    public DisjointSet(int n) {
       //Take n+1 values, so taht it works for 0 and 1 based indexing graphs.
       for (int i = 0; i <= n; i++) {
            rank.add(0);
            parent.add(i);
            size.add(1);
        }
    }

    public int findUPar(int node) {
        if (node == parent.get(node)) {
            return node;
        }
        int ulp = findUPar(parent.get(node));
        parent.set(node, ulp);
        return parent.get(node);
    }

    public void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank.get(ulp_u) < rank.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
        } else if (rank.get(ulp_v) < rank.get(ulp_u)) {
            parent.set(ulp_v, ulp_u);
        } else {
            parent.set(ulp_v, ulp_u);
            int rankU = rank.get(ulp_u);
            rank.set(ulp_u, rankU + 1);
        }
    }

    public void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size.get(ulp_u) < size.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, size.get(ulp_v) + size.get(ulp_u));
        } else {
            parent.set(ulp_v, ulp_u);
            size.set(ulp_u, size.get(ulp_u) + size.get(ulp_v));
        }
    }
}

Krushkal's algo - O(ElogE + V)
Sort all edge weights. Try not taking priority queue as we are not adding any new edges to priority queue as we continue the algo.
Start creating spanningTree by taking min edge and keep on creating disjoint set. 
If for any edge, if u & v belong to same component, then don't add it to MST as it is already present in the graph.

class Edge implements Comparable<Edge> {
    int src, dest, weight;
    Edge(int _src, int _dest, int _wt) {
        this.src = _src; this.dest = _dest; this.weight = _wt;
    }
    // Comparator function used for
    // sorting edgesbased on their weight
    public int compareTo(Edge compareEdge) {
        return this.weight - compareEdge.weight;
    }
};

class Solution {
    //Function to find sum of weights of edges of the Minimum Spanning Tree.
    static int spanningTree(int V,
                            ArrayList<ArrayList<ArrayList<Integer>>> adj) {
        List<Edge> edges = new ArrayList<Edge>();
        // O(N + E)
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < adj.get(i).size(); j++) {
                int adjNode = adj.get(i).get(j).get(0);
                int wt = adj.get(i).get(j).get(1);
                int node = i;
                Edge temp = new Edge(i, adjNode, wt);
                edges.add(temp);
            }
        }
        DisjointSet ds = new DisjointSet(V);
        // M log M
        Collections.sort(edges);
        int mstWt = 0;
        // M x 4 x alpha x 2
        for (int i = 0; i < edges.size(); i++) {
            int wt = edges.get(i).weight;
            int u = edges.get(i).src;
            int v = edges.get(i).dest;

            if (ds.findUPar(u) != ds.findUPar(v)) {
                mstWt += wt;
                ds.unionBySize(u, v);
            }
        }

        return mstWt;
    }
}
########################################################################################################################
Strongly connected components SCC (Kosaraju's Algorithm) - O(V+E)
Directed Graph (Each node of a strongly connected component can go every other node of the component)
Sort all the nodes according to their finishing time - First element of top sort's stack.
Reverse all the edges of the entire graph
Perform the DFS and count the no. of different DFS calls to get the no. of SCC

########################################################################################################################
Bridges in graph -
A critical connection/ bridge is a connection that, if removed, will make some nodes unable to reach some other nodes.
If we remove that edge, it divides the graph into multiple components.



########################################################################################################################
Articulation points - 

