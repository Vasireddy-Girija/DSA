elements in array are continuous
elements in linked lists are non-continuous

class Node{
  int data;
  Node next;
  Node(int data, Node next){
    this.data = data;
    this.next = next;
  }
}
base case - if(head==null) return;

Search for an element - O(n)
Length of linked list - O(n)

If we want to create new linked list, create dummy head, add remaining elements to the head and return dummyHead.next as answer.
############################################################################################
Delete head - O(1) head=head.next;

Delete tail - O(n)
  if(head==null || head.next==null) return null;
  Node temp = head;
  while(temp.next.next!=null){
      temp = temp.next;
  }
  temp.next = null;

Delete kth element - O(k)
  if(k==1){
    head = head.next;
    return head;
  }
  Node temp = head; Node prev=null;
  int cnt=1;
  while(temp != null){
    if(cnt == k){
        prev.next = temp.next;
        return head;
    }
    prev = temp;
    temp = temp.next;
    cnt += 1;
  }
  return head;

Delete element val - O(n) - same as above

Delete middle element - Find middle element by using fast, slow pointers.

############################################################################################
Insert head - O(1) return head = new Node(data);

Insert tail - O(n)
if(head == null) return head=new Node(data);
Node temp = head; Node prev = null;
while(temp != null){
  prev = temp;
  temp = temp.next;
}
prev.next = new Node(data);
return head;

Insert at kth position - O(k)
Node newNode = new Node(data);
if(k==1){
  newNode.next = head;
  return temp;
}
Node temp = head; Node prev =  null; int cnt=1;
while(temp != null){
  if(cnt == k){
    prev.next = newNode;
    newNode.next = temp;
    return head;
  }
  prev = temp;
  temp = temp.next;
  cnt += 1;
}
if(cnt == k){
    prev.next = newNode;
}
return head;

############################################################################################
Reverse a linked list -
Iterative - Point curr.next to prev, before that keep saving curr.next.
class Solution {
    public ListNode reverseList(ListNode head) {
        if(head==null || head.next==null) return head;
        ListNode prev=null;
        ListNode curr=head;
        while(curr != null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}

Reverse LL - Recursive 
public ListNode reverseLL(ListNode head){
        if(head==null || head.next==null) return head;
        ListNode front = head.next;
        ListNode newNode = reverseLL(front);
        front.next = head;
        head.next = null; //imp
        return newNode;
    }

***Rotate a LL by k places to the right - (reverse 3 times)
Find n i.e; total len of LL. Do k=k%n. reverse(n-k), reverse(last k) and then reverse complete LL.
class Solution {
    public int lenOfLL(ListNode head){
        if(head==null) return 0;
        int count=0;
        while(head != null){
            count += 1;
            head = head.next;
        }
        return count;
    }
    public ListNode getKthNode(ListNode head, int k){
        if(head==null) return null;
        int count=0;
        while(head != null){
            count += 1;
            if(count==k) return head;
            head=head.next;
        }
        return null;
    }
    public ListNode reverseLL(ListNode head){
        if(head==null || head.next==null) return head;
        ListNode prev=null;
        ListNode curr=head;
        while(curr != null){
            ListNode next = curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    public ListNode rotateRight(ListNode head, int k) {
        int n = lenOfLL(head);
        if(n==0) return null;
        k = k%n;
        if(k==0) return head;
        ListNode kthNode = getKthNode(head, n-k);
        ListNode nextNode = kthNode.next;
        kthNode.next = null;
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;
        dummy.next = reverseLL(head);
        dummy = head;
        dummy.next = reverseLL(nextNode);
        return reverseLL(temp.next);
    }
}

***Reverse group of K LL -
class Solution {
    public ListNode getKthNode(ListNode head, int k){
        if(head==null || k==0)return null;
        int count = 0;
        while(head != null){
            count += 1;
            if(count==k) return head;
            head=head.next;
        }
        return null;
    }
    public ListNode reverseLL(ListNode head){
        if(head==null || head.next==null) return head;
        ListNode front = head.next;
        ListNode newNode = reverseLL(front);
        front.next = head;
        head.next = null;
        return newNode;
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;
        ListNode kthNode = getKthNode(head, k);
        ListNode nextHead=head;
        while(kthNode != null){
            nextHead=kthNode.next;
            kthNode.next = null;
            dummy.next = reverseLL(head);
            dummy=head;
            head=nextHead;
            kthNode = getKthNode(head, k);
        }
        dummy.next = nextHead;
        return temp.next;
    }
  public ListNode reverseKGroup(ListNode head, int k) {
        ListNode kthNode = getKthNode(head, k);
        if(kthNode == null) return head;
        ListNode next = kthNode.next;
        kthNode.next = null;
        ListNode newHead = reverseLL(head);
        head.next = reverseKGroup(next, k);
        return newHead;
    }
}

***Merge 2 sorted LL - No extra space needed.
 public ListNode merge(ListNode leftNode, ListNode rightNode){
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;
        while(leftNode != null && rightNode != null){
            if(leftNode.val < rightNode.val){
                dummy.next = leftNode;
                leftNode = leftNode.next;
            }else{
                dummy.next = rightNode;
                rightNode = rightNode.next;
            }
            dummy = dummy.next;
        }
        if(leftNode != null){
            dummy.next = leftNode;
        }
        if(rightNode != null){
            dummy.next = rightNode;
        }
        return temp.next;
    }


***Sort a linked list - We use mergeSort - TC-O(nlogn)
class Solution {
    public ListNode getMiddleElement(ListNode head){
        ListNode fast = head.next;
        ListNode slow = head;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    public ListNode merge(ListNode leftNode, ListNode rightNode){
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;
        while(leftNode != null && rightNode != null){
            if(leftNode.val < rightNode.val){
                dummy.next = leftNode;
                leftNode = leftNode.next;
            }else{
                dummy.next = rightNode;
                rightNode = rightNode.next;
            }
            dummy = dummy.next;
        }
        if(leftNode != null){
            dummy.next = leftNode;
        }
        if(rightNode != null){
            dummy.next = rightNode;
        }
        return temp.next;
    }
    public ListNode sortList(ListNode head) {
        if(head==null || head.next == null) return head; //single element
        ListNode middle = getMiddleElement(head);//middle should not be null.
        ListNode leftHead = head;
        ListNode rightHead = middle.next;
        middle.next = null;
        ListNode newLeftHead = sortList(leftHead);
        ListNode newRightHead = sortList(rightHead);
        ListNode newHead = merge(newLeftHead, newRightHead);
        return newHead;
    }
}
############################################################################################
Tortoise-hare method -
1.Find middle element in a linked list
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while(fast!=null && fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
}
If fast==null, then it is even length linkedList. If fast.next==null, then it is odd length linkedList.
For even length, middle element will be n/2+1 and for odd elements, it is (n+1)/2.
ie, for LL of length 4, mid element will point to 3 instead of 2.
For LL of length 5, mid element will point to 3.
Inorder for mid to point to 2 in even and 3 in odd, initialise, fast to head.next.(Use this for merge sort)

2.Check if there is a cycle in linked-list
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
            if(slow == fast) return true;
        }
        return false;
    }
}

3.Find length of loop - 
We should need one Node which is part of loop. Once we get it, iterate till we get it to count.
How to get one element from loop - slow == fas, slow will be one element in a loop.
class Solution {
    public int countNodesinLoop(Node head) {
        Node slow = head;
        Node fast = head;
        while(fast!=null && fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow) break;
        }
        if(fast==null || fast.next==null) return 0; //Don't check for slow != fast as it fails for single element in LinkedList.
        int cnt=1;
        Node next = fast.next;
        while(next != slow){
            cnt += 1;
            next = next.next;
        }
        return cnt;
    }
}

4.Find starting point of loop - 
How ? 
a)find slow == fast pointer. Set slow pointer to head and pointer. Now move slow and fast poiner by one step. 
When slow and fast pointer meets again, that will be starting point.
Intuition -
Let length from head to startPoint of loop be l.
When slow pointer moves l, fast pointer moves 2l, out of which l is inside loop.
Let the total distance of loop - l+d.
After this step, for each turn, slow moves 1 pointer and fast moves 2 pointers. Difference between slow and fast will be d-1.
After d steps, they'll meet.
Now slow and fast pointer will be d steps from starting point.
public class Solution {
    public ListNode startNode(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow){
                slow = head;
                while(fast != slow){
                    slow = slow.next;
                    fast = fast.next;
                }
                return slow;
            }
        }
        return null;
    }
}
############################################################################################
Rotate a LinkedList by k places -
Find tail. Find (n-k)th element. Add tail to head. Make (n-k-1)th next ndoe to null. Return new head as (n-k)th element.
class Solution {
    public ListNode getKthNode(ListNode head, int k){
        int count = 0;
        ListNode prev = null;
        while(count < k){
            prev = head;
            head = head.next;
            count += 1;
        }
        return prev;
    }
    public int getLengthOfLinkedList(ListNode head){
        int count = 0;
        while(head != null){
            count += 1;
            head = head.next;
        }
        return count;
    }
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null) return head;
        int l = getLengthOfLinkedList(head);
        k = k % l;
        if(k==0) return head;
        ListNode tail = head;
        while(tail.next != null){
            tail = temp.next;
        }
        ListNode kthNode = getKthNode(head, l-k);
        ListNode newHead = kthNode.next;
        tail.next = head;
        kthNode.next = null;
        return newHead;
    }
}
