When to use partition DP - Based on partition, if result changes, we should use partition DP.
Example - Evaluation of expression (2+3)*(4+5) is different from 2+(3*4)+5.

Matrix chain multiplication -
class Solution {
    static int recFunc(int[] arr, int startIdx, int endIdx){
        if(startIdx == endIdx) return 0;
        if(startIdx+1 == endIdx) return 0;
        int minVal = Integer.MAX_VALUE;
        for(int partition=startIdx+1; partition<endIdx; partition++){
            minVal = Math.min(minVal, 
            recFunc(arr, startIdx, partition)+recFunc(arr, partition, endIdx)+arr[startIdx]*arr[partition]*arr[endIdx]);
        }
        return minVal;
    }
    static int tab(int[] arr){
        int n=arr.length;
        int[][] dp = new int[n][n];
        for(int i=0; i<n; i++) Arrays.fill(dp[i], Integer.MAX_VALUE);
        for(int i=0; i<n; i++) dp[i][i]=0;
        for(int i=1; i<n; i++){
            dp[i-1][i] = 0;
        }
        for(int i=n-1; i>=0; i--){ //After writing recursion, understand from where i and j should go. Here, k starts from k+1 and we need dp[k][j] i.e we need greater values before. So looping it from n-1.
            for(int j=0; j<n; j++){
                for(int k=i+1; k<j; k++){
                    dp[i][j] = Math.min(dp[i][j], arr[i]*arr[k]*arr[j]+dp[i][k]+dp[k][j]);
                }
            }
        }
        return dp[0][n-1];
    }
    static int matrixMultiplication(int arr[]) {
        //return recFunc(arr, 0, arr.length-1);
        return tab(arr);
    }
}
