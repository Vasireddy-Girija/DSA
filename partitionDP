When to use partition DP - Based on partition, if result changes, we should use partition DP.
Example - Evaluation of expression (2+3)*(4+5) is different from 2+(3*4)+5.

Matrix chain multiplication -
class Solution {
    static int recFunc(int[] arr, int startIdx, int endIdx){
        if(startIdx == endIdx) return 0;
        if(startIdx+1 == endIdx) return 0;
        int minVal = Integer.MAX_VALUE;
        for(int partition=startIdx+1; partition<endIdx; partition++){
            minVal = Math.min(minVal, 
            recFunc(arr, startIdx, partition)+recFunc(arr, partition, endIdx)+arr[startIdx]*arr[partition]*arr[endIdx]);
        }
        return minVal;
    }
    static int tab(int[] arr){
        int n=arr.length;
        int[][] dp = new int[n][n];
        for(int i=0; i<n; i++) Arrays.fill(dp[i], Integer.MAX_VALUE);
        for(int i=0; i<n; i++) dp[i][i]=0;
        for(int i=1; i<n; i++){
            dp[i-1][i] = 0;
        }
        for(int i=n-1; i>=0; i--){ //After writing recursion, understand from where i and j should go. Here, k starts from k+1 and we need dp[k][j] i.e we need greater values before. So looping it from n-1.
            for(int j=0; j<n; j++){
                for(int k=i+1; k<j; k++){
                    dp[i][j] = Math.min(dp[i][j], arr[i]*arr[k]*arr[j]+dp[i][k]+dp[k][j]);
                }
            }
        }
        return dp[0][n-1];
    }
    static int matrixMultiplication(int arr[]) {
        //return recFunc(arr, 0, arr.length-1);
        return tab(arr);
    }
}

Burst balloons - Check the intuition from Striver.
class Solution {
    public int recFunc(int[] nums, int startIdx, int endIdx){
        if(startIdx > endIdx) return 0;
        int ans = Integer.MIN_VALUE;
        for(int i=startIdx; i<=endIdx; i++){
            ans = Math.max(ans, recFunc(nums, startIdx, i-1)+nums[startIdx-1]*nums[i]*nums[endIdx+1]+recFunc(nums, i+1, endIdx));
        }
        return ans;
    }
    public int tab(int[] nums){
        int n = nums.length;
        int[][] dp = new int[n][n];
        for(int i=0; i<n; i++) Arrays.fill(dp[i], Integer.MIN_VALUE);
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(i>j) dp[i][j] = 0;
            }
        }
        for(int i=n-1; i>=1; i--){
            for(int j=0; j<n-1; j++){
                for(int k=i; k<=j; k++){
                    dp[i][j] = Math.max(dp[i][j], dp[i][k-1]+dp[k+1][j]+nums[k]*nums[i-1]*nums[j+1]);
                }
                if(dp[i][j] == Integer.MIN_VALUE) dp[i][j]=0;
            }
        }
        return dp[1][n-2];
    }
    public int maxCoins(int[] nums) {
        int n = nums.length;
        int[] arr = new int[n+2];
        arr[0]=1;
        arr[n+1]=1;
        for(int i=0; i<n; i++){
            arr[i+1] = nums[i];
        }
        //return recFunc(arr, 1, n);
        return tab(arr);
    }
}
